{"ast":null,"code":"import _defineProperty2 from \"/home/brian/Desktop/non-functional-wa-connection-demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _createForOfIteratorHelper from \"/home/brian/Desktop/non-functional-wa-connection-demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _toConsumableArray from \"/home/brian/Desktop/non-functional-wa-connection-demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/home/brian/Desktop/non-functional-wa-connection-demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/home/brian/Desktop/non-functional-wa-connection-demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport React, { createContext, useContext, useState, useMemo, useCallback, useEffect, useLayoutEffect, useRef } from 'react';\nimport { Editor, Transforms, Range, Path, Node as Node$1, Text as Text$1, Element as Element$1 } from 'slate';\nimport throttle from 'lodash/throttle';\nimport scrollIntoView from 'scroll-into-view-if-needed';\nimport getDirection from 'direction';\nimport ReactDOM from 'react-dom';\nimport { isKeyHotkey } from 'is-hotkey';\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n/**\r\n * An auto-incrementing identifier for keys.\r\n */\n\n\nvar n = 0;\n/**\r\n * A class that keeps track of a key string. We use a full class here because we\r\n * want to be able to use them as keys in `WeakMap` objects.\r\n */\n\nvar Key = function Key() {\n  _classCallCheck(this, Key);\n\n  this.id = \"\".concat(n++);\n};\n/**\r\n * Two weak maps that allow us rebuild a path given a node. They are populated\r\n * at render time such that after a render occurs we can always backtrack.\r\n */\n\n\nvar NODE_TO_INDEX = new WeakMap();\nvar NODE_TO_PARENT = new WeakMap();\n/**\r\n * Weak maps that allow us to go between Slate nodes and DOM nodes. These\r\n * are used to resolve DOM event-related logic into Slate actions.\r\n */\n\nvar EDITOR_TO_ELEMENT = new WeakMap();\nvar ELEMENT_TO_NODE = new WeakMap();\nvar KEY_TO_ELEMENT = new WeakMap();\nvar NODE_TO_ELEMENT = new WeakMap();\nvar NODE_TO_KEY = new WeakMap();\n/**\r\n * Weak maps for storing editor-related state.\r\n */\n\nvar IS_READ_ONLY = new WeakMap();\nvar IS_FOCUSED = new WeakMap();\n/**\r\n * Weak map for associating the context `onChange` context with the plugin.\r\n */\n\nvar EDITOR_TO_ON_CHANGE = new WeakMap();\n/**\r\n * Symbols.\r\n */\n\nvar PLACEHOLDER_SYMBOL = Symbol('placeholder');\n/**\r\n * Types.\r\n */\n\n/**\r\n * Check if a DOM node is a comment node.\r\n */\n\nvar isDOMComment = function isDOMComment(value) {\n  return isDOMNode(value) && value.nodeType === 8;\n};\n/**\r\n * Check if a DOM node is an element node.\r\n */\n\n\nvar isDOMElement = function isDOMElement(value) {\n  return isDOMNode(value) && value.nodeType === 1;\n};\n/**\r\n * Check if a value is a DOM node.\r\n */\n\n\nvar isDOMNode = function isDOMNode(value) {\n  return value instanceof Node;\n};\n/**\r\n * Check if a DOM node is an element node.\r\n */\n\n\nvar isDOMText = function isDOMText(value) {\n  return isDOMNode(value) && value.nodeType === 3;\n};\n/**\r\n * Checks whether a paste event is a plaintext-only event.\r\n */\n\n\nvar isPlainTextOnlyPaste = function isPlainTextOnlyPaste(event) {\n  return event.clipboardData && event.clipboardData.getData('text/plain') !== '' && event.clipboardData.types.length === 1;\n};\n/**\r\n * Normalize a DOM point so that it always refers to a text node.\r\n */\n\n\nvar normalizeDOMPoint = function normalizeDOMPoint(domPoint) {\n  var _domPoint = _slicedToArray(domPoint, 2),\n      node = _domPoint[0],\n      offset = _domPoint[1]; // If it's an element node, its offset refers to the index of its children\n  // including comment nodes, so try to find the right text child node.\n\n\n  if (isDOMElement(node) && node.childNodes.length) {\n    var isLast = offset === node.childNodes.length;\n    var direction = isLast ? 'backward' : 'forward';\n    var index = isLast ? offset - 1 : offset;\n    node = getEditableChild(node, index, direction); // If the node has children, traverse until we have a leaf node. Leaf nodes\n    // can be either text nodes, or other void DOM nodes.\n\n    while (isDOMElement(node) && node.childNodes.length) {\n      var i = isLast ? node.childNodes.length - 1 : 0;\n      node = getEditableChild(node, i, direction);\n    } // Determine the new offset inside the text node.\n\n\n    offset = isLast && node.textContent != null ? node.textContent.length : 0;\n  } // Return the node and offset.\n\n\n  return [node, offset];\n};\n/**\r\n * Get the nearest editable child at `index` in a `parent`, preferring\r\n * `direction`.\r\n */\n\n\nvar getEditableChild = function getEditableChild(parent, index, direction) {\n  var childNodes = parent.childNodes;\n  var child = childNodes[index];\n  var i = index;\n  var triedForward = false;\n  var triedBackward = false; // While the child is a comment node, or an element node with no children,\n  // keep iterating to find a sibling non-void, non-comment node.\n\n  while (isDOMComment(child) || isDOMElement(child) && child.childNodes.length === 0 || isDOMElement(child) && child.getAttribute('contenteditable') === 'false') {\n    if (triedForward && triedBackward) {\n      break;\n    }\n\n    if (i >= childNodes.length) {\n      triedForward = true;\n      i = index - 1;\n      direction = 'backward';\n      continue;\n    }\n\n    if (i < 0) {\n      triedBackward = true;\n      i = index + 1;\n      direction = 'forward';\n      continue;\n    }\n\n    child = childNodes[i];\n    i += direction === 'forward' ? 1 : -1;\n  }\n\n  return child;\n};\n/**\r\n * Get a plaintext representation of the content of a node, accounting for block\r\n * elements which get a newline appended.\r\n *\r\n * The domNode must be attached to the DOM.\r\n */\n\n\nvar getPlainText = function getPlainText(domNode) {\n  var text = '';\n\n  if (isDOMText(domNode) && domNode.nodeValue) {\n    return domNode.nodeValue;\n  }\n\n  if (isDOMElement(domNode)) {\n    for (var _i = 0, _Array$from = Array.from(domNode.childNodes); _i < _Array$from.length; _i++) {\n      var childNode = _Array$from[_i];\n      text += getPlainText(childNode);\n    }\n\n    var display = getComputedStyle(domNode).getPropertyValue('display');\n\n    if (display === 'block' || display === 'list' || domNode.tagName === 'BR') {\n      text += '\\n';\n    }\n  }\n\n  return text;\n};\n\nvar ReactEditor = {\n  /**\r\n   * Find a key for a Slate node.\r\n   */\n  findKey: function findKey(editor, node) {\n    var key = NODE_TO_KEY.get(node);\n\n    if (!key) {\n      key = new Key();\n      NODE_TO_KEY.set(node, key);\n    }\n\n    return key;\n  },\n\n  /**\r\n   * Find the path of Slate node.\r\n   */\n  findPath: function findPath(editor, node) {\n    var path = [];\n    var child = node;\n\n    while (true) {\n      var parent = NODE_TO_PARENT.get(child);\n\n      if (parent == null) {\n        if (Editor.isEditor(child)) {\n          return path;\n        } else {\n          break;\n        }\n      }\n\n      var i = NODE_TO_INDEX.get(child);\n\n      if (i == null) {\n        break;\n      }\n\n      path.unshift(i);\n      child = parent;\n    }\n\n    throw new Error(\"Unable to find the path for Slate node: \".concat(JSON.stringify(node)));\n  },\n\n  /**\r\n   * Check if the editor is focused.\r\n   */\n  isFocused: function isFocused(editor) {\n    return !!IS_FOCUSED.get(editor);\n  },\n\n  /**\r\n   * Check if the editor is in read-only mode.\r\n   */\n  isReadOnly: function isReadOnly(editor) {\n    return !!IS_READ_ONLY.get(editor);\n  },\n\n  /**\r\n   * Blur the editor.\r\n   */\n  blur: function blur(editor) {\n    var el = ReactEditor.toDOMNode(editor, editor);\n    IS_FOCUSED.set(editor, false);\n\n    if (window.document.activeElement === el) {\n      el.blur();\n    }\n  },\n\n  /**\r\n   * Focus the editor.\r\n   */\n  focus: function focus(editor) {\n    var el = ReactEditor.toDOMNode(editor, editor);\n    IS_FOCUSED.set(editor, true);\n\n    if (window.document.activeElement !== el) {\n      el.focus({\n        preventScroll: true\n      });\n    }\n  },\n\n  /**\r\n   * Deselect the editor.\r\n   */\n  deselect: function deselect(editor) {\n    var selection = editor.selection;\n    var domSelection = window.getSelection();\n\n    if (domSelection && domSelection.rangeCount > 0) {\n      domSelection.removeAllRanges();\n    }\n\n    if (selection) {\n      Transforms.deselect(editor);\n    }\n  },\n\n  /**\r\n   * Check if a DOM node is within the editor.\r\n   */\n  hasDOMNode: function hasDOMNode(editor, target) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var _options$editable = options.editable,\n        editable = _options$editable === void 0 ? false : _options$editable;\n    var editorEl = ReactEditor.toDOMNode(editor, editor);\n    var targetEl; // COMPAT: In Firefox, reading `target.nodeType` will throw an error if\n    // target is originating from an internal \"restricted\" element (e.g. a\n    // stepper arrow on a number input). (2018/05/04)\n    // https://github.com/ianstormtaylor/slate/issues/1819\n\n    try {\n      targetEl = isDOMElement(target) ? target : target.parentElement;\n    } catch (err) {\n      if (!err.message.includes('Permission denied to access property \"nodeType\"')) {\n        throw err;\n      }\n    }\n\n    if (!targetEl) {\n      return false;\n    }\n\n    return targetEl.closest(\"[data-slate-editor]\") === editorEl && (!editable || targetEl.isContentEditable || !!targetEl.getAttribute('data-slate-zero-width'));\n  },\n\n  /**\r\n   * Insert data from a `DataTransfer` into the editor.\r\n   */\n  insertData: function insertData(editor, data) {\n    editor.insertData(data);\n  },\n\n  /**\r\n   * Sets data from the currently selected fragment on a `DataTransfer`.\r\n   */\n  setFragmentData: function setFragmentData(editor, data) {\n    editor.setFragmentData(data);\n  },\n\n  /**\r\n   * Find the native DOM element from a Slate node.\r\n   */\n  toDOMNode: function toDOMNode(editor, node) {\n    var domNode = Editor.isEditor(node) ? EDITOR_TO_ELEMENT.get(editor) : KEY_TO_ELEMENT.get(ReactEditor.findKey(editor, node));\n\n    if (!domNode) {\n      throw new Error(\"Cannot resolve a DOM node from Slate node: \".concat(JSON.stringify(node)));\n    }\n\n    return domNode;\n  },\n\n  /**\r\n   * Find a native DOM selection point from a Slate point.\r\n   */\n  toDOMPoint: function toDOMPoint(editor, point) {\n    var _Editor$node = Editor.node(editor, point.path),\n        _Editor$node2 = _slicedToArray(_Editor$node, 1),\n        node = _Editor$node2[0];\n\n    var el = ReactEditor.toDOMNode(editor, node);\n    var domPoint; // If we're inside a void node, force the offset to 0, otherwise the zero\n    // width spacing character will result in an incorrect offset of 1\n\n    if (Editor.void(editor, {\n      at: point\n    })) {\n      point = {\n        path: point.path,\n        offset: 0\n      };\n    } // For each leaf, we need to isolate its content, which means filtering\n    // to its direct text and zero-width spans. (We have to filter out any\n    // other siblings that may have been rendered alongside them.)\n\n\n    var selector = \"[data-slate-string], [data-slate-zero-width]\";\n    var texts = Array.from(el.querySelectorAll(selector));\n    var start = 0;\n\n    for (var _i2 = 0, _texts = texts; _i2 < _texts.length; _i2++) {\n      var text = _texts[_i2];\n      var domNode = text.childNodes[0];\n\n      if (domNode == null || domNode.textContent == null) {\n        continue;\n      }\n\n      var length = domNode.textContent.length;\n      var attr = text.getAttribute('data-slate-length');\n      var trueLength = attr == null ? length : parseInt(attr, 10);\n      var end = start + trueLength;\n\n      if (point.offset <= end) {\n        var offset = Math.min(length, Math.max(0, point.offset - start));\n        domPoint = [domNode, offset];\n        break;\n      }\n\n      start = end;\n    }\n\n    if (!domPoint) {\n      throw new Error(\"Cannot resolve a DOM point from Slate point: \".concat(JSON.stringify(point)));\n    }\n\n    return domPoint;\n  },\n\n  /**\r\n   * Find a native DOM range from a Slate `range`.\r\n   *\r\n   * Notice: the returned range will always be ordinal regardless of the direction of Slate `range` due to DOM API limit.\r\n   *\r\n   * there is no way to create a reverse DOM Range using Range.setStart/setEnd\r\n   * according to https://dom.spec.whatwg.org/#concept-range-bp-set.\r\n   */\n  toDOMRange: function toDOMRange(editor, range) {\n    var anchor = range.anchor,\n        focus = range.focus;\n    var isBackward = Range.isBackward(range);\n    var domAnchor = ReactEditor.toDOMPoint(editor, anchor);\n    var domFocus = Range.isCollapsed(range) ? domAnchor : ReactEditor.toDOMPoint(editor, focus);\n    var domRange = window.document.createRange();\n\n    var _ref = isBackward ? domFocus : domAnchor,\n        _ref2 = _slicedToArray(_ref, 2),\n        startNode = _ref2[0],\n        startOffset = _ref2[1];\n\n    var _ref3 = isBackward ? domAnchor : domFocus,\n        _ref4 = _slicedToArray(_ref3, 2),\n        endNode = _ref4[0],\n        endOffset = _ref4[1]; // A slate Point at zero-width Leaf always has an offset of 0 but a native DOM selection at\n    // zero-width node has an offset of 1 so we have to check if we are in a zero-width node and\n    // adjust the offset accordingly.\n\n\n    var startEl = isDOMElement(startNode) ? startNode : startNode.parentElement;\n    var isStartAtZeroWidth = !!startEl.getAttribute('data-slate-zero-width');\n    var endEl = isDOMElement(endNode) ? endNode : endNode.parentElement;\n    var isEndAtZeroWidth = !!endEl.getAttribute('data-slate-zero-width');\n    domRange.setStart(startNode, isStartAtZeroWidth ? 1 : startOffset);\n    domRange.setEnd(endNode, isEndAtZeroWidth ? 1 : endOffset);\n    return domRange;\n  },\n\n  /**\r\n   * Find a Slate node from a native DOM `element`.\r\n   */\n  toSlateNode: function toSlateNode(editor, domNode) {\n    var domEl = isDOMElement(domNode) ? domNode : domNode.parentElement;\n\n    if (domEl && !domEl.hasAttribute('data-slate-node')) {\n      domEl = domEl.closest(\"[data-slate-node]\");\n    }\n\n    var node = domEl ? ELEMENT_TO_NODE.get(domEl) : null;\n\n    if (!node) {\n      throw new Error(\"Cannot resolve a Slate node from DOM node: \".concat(domEl));\n    }\n\n    return node;\n  },\n\n  /**\r\n   * Get the target range from a DOM `event`.\r\n   */\n  findEventRange: function findEventRange(editor, event) {\n    if ('nativeEvent' in event) {\n      event = event.nativeEvent;\n    }\n\n    var _event = event,\n        x = _event.clientX,\n        y = _event.clientY,\n        target = _event.target;\n\n    if (x == null || y == null) {\n      throw new Error(\"Cannot resolve a Slate range from a DOM event: \".concat(event));\n    }\n\n    var node = ReactEditor.toSlateNode(editor, event.target);\n    var path = ReactEditor.findPath(editor, node); // If the drop target is inside a void node, move it into either the\n    // next or previous node, depending on which side the `x` and `y`\n    // coordinates are closest to.\n\n    if (Editor.isVoid(editor, node)) {\n      var rect = target.getBoundingClientRect();\n      var isPrev = editor.isInline(node) ? x - rect.left < rect.left + rect.width - x : y - rect.top < rect.top + rect.height - y;\n      var edge = Editor.point(editor, path, {\n        edge: isPrev ? 'start' : 'end'\n      });\n      var point = isPrev ? Editor.before(editor, edge) : Editor.after(editor, edge);\n\n      if (point) {\n        var _range = Editor.range(editor, point);\n\n        return _range;\n      }\n    } // Else resolve a range from the caret position where the drop occured.\n\n\n    var domRange;\n    var _window = window,\n        document = _window.document; // COMPAT: In Firefox, `caretRangeFromPoint` doesn't exist. (2016/07/25)\n\n    if (document.caretRangeFromPoint) {\n      domRange = document.caretRangeFromPoint(x, y);\n    } else {\n      var position = document.caretPositionFromPoint(x, y);\n\n      if (position) {\n        domRange = document.createRange();\n        domRange.setStart(position.offsetNode, position.offset);\n        domRange.setEnd(position.offsetNode, position.offset);\n      }\n    }\n\n    if (!domRange) {\n      throw new Error(\"Cannot resolve a Slate range from a DOM event: \".concat(event));\n    } // Resolve a Slate range from the DOM range.\n\n\n    var range = ReactEditor.toSlateRange(editor, domRange);\n    return range;\n  },\n\n  /**\r\n   * Find a Slate point from a DOM selection's `domNode` and `domOffset`.\r\n   */\n  toSlatePoint: function toSlatePoint(editor, domPoint) {\n    var _normalizeDOMPoint = normalizeDOMPoint(domPoint),\n        _normalizeDOMPoint2 = _slicedToArray(_normalizeDOMPoint, 2),\n        nearestNode = _normalizeDOMPoint2[0],\n        nearestOffset = _normalizeDOMPoint2[1];\n\n    var parentNode = nearestNode.parentNode;\n    var textNode = null;\n    var offset = 0;\n\n    if (parentNode) {\n      var voidNode = parentNode.closest('[data-slate-void=\"true\"]');\n      var leafNode = parentNode.closest('[data-slate-leaf]');\n      var domNode = null; // Calculate how far into the text node the `nearestNode` is, so that we\n      // can determine what the offset relative to the text node is.\n\n      if (leafNode) {\n        textNode = leafNode.closest('[data-slate-node=\"text\"]');\n        var range = window.document.createRange();\n        range.setStart(textNode, 0);\n        range.setEnd(nearestNode, nearestOffset);\n        var contents = range.cloneContents();\n        var removals = [].concat(_toConsumableArray(contents.querySelectorAll('[data-slate-zero-width]')), _toConsumableArray(contents.querySelectorAll('[contenteditable=false]')));\n        removals.forEach(function (el) {\n          el.parentNode.removeChild(el);\n        }); // COMPAT: Edge has a bug where Range.prototype.toString() will\n        // convert \\n into \\r\\n. The bug causes a loop when slate-react\n        // attempts to reposition its cursor to match the native position. Use\n        // textContent.length instead.\n        // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10291116/\n\n        offset = contents.textContent.length;\n        domNode = textNode;\n      } else if (voidNode) {\n        // For void nodes, the element with the offset key will be a cousin, not an\n        // ancestor, so find it by going down from the nearest void parent.\n        leafNode = voidNode.querySelector('[data-slate-leaf]');\n        textNode = leafNode.closest('[data-slate-node=\"text\"]');\n        domNode = leafNode;\n        offset = domNode.textContent.length;\n      } // COMPAT: If the parent node is a Slate zero-width space, editor is\n      // because the text node should have no characters. However, during IME\n      // composition the ASCII characters will be prepended to the zero-width\n      // space, so subtract 1 from the offset to account for the zero-width\n      // space character.\n\n\n      if (domNode && offset === domNode.textContent.length && parentNode.hasAttribute('data-slate-zero-width')) {\n        offset--;\n      }\n    }\n\n    if (!textNode) {\n      throw new Error(\"Cannot resolve a Slate point from DOM point: \".concat(domPoint));\n    } // COMPAT: If someone is clicking from one Slate editor into another,\n    // the select event fires twice, once for the old editor's `element`\n    // first, and then afterwards for the correct `element`. (2017/03/03)\n\n\n    var slateNode = ReactEditor.toSlateNode(editor, textNode);\n    var path = ReactEditor.findPath(editor, slateNode);\n    return {\n      path: path,\n      offset: offset\n    };\n  },\n\n  /**\r\n   * Find a Slate range from a DOM range or selection.\r\n   */\n  toSlateRange: function toSlateRange(editor, domRange) {\n    var el = domRange instanceof Selection ? domRange.anchorNode : domRange.startContainer;\n    var anchorNode;\n    var anchorOffset;\n    var focusNode;\n    var focusOffset;\n    var isCollapsed;\n\n    if (el) {\n      if (domRange instanceof Selection) {\n        anchorNode = domRange.anchorNode;\n        anchorOffset = domRange.anchorOffset;\n        focusNode = domRange.focusNode;\n        focusOffset = domRange.focusOffset;\n        isCollapsed = domRange.isCollapsed;\n      } else {\n        anchorNode = domRange.startContainer;\n        anchorOffset = domRange.startOffset;\n        focusNode = domRange.endContainer;\n        focusOffset = domRange.endOffset;\n        isCollapsed = domRange.collapsed;\n      }\n    }\n\n    if (anchorNode == null || focusNode == null || anchorOffset == null || focusOffset == null) {\n      throw new Error(\"Cannot resolve a Slate range from DOM range: \".concat(domRange));\n    }\n\n    var anchor = ReactEditor.toSlatePoint(editor, [anchorNode, anchorOffset]);\n    var focus = isCollapsed ? anchor : ReactEditor.toSlatePoint(editor, [focusNode, focusOffset]);\n    return {\n      anchor: anchor,\n      focus: focus\n    };\n  }\n};\n/**\r\n * A React context for sharing the `focused` state of the editor.\r\n */\n\nvar FocusedContext = createContext(false);\n/**\r\n * Get the current `focused` state of the editor.\r\n */\n\nvar useFocused = function useFocused() {\n  return useContext(FocusedContext);\n};\n/**\r\n * A React context for sharing the editor object.\r\n */\n\n\nvar EditorContext = createContext(null);\n/**\r\n * Get the current editor object from the React context.\r\n */\n\nvar useEditor = function useEditor() {\n  var editor = useContext(EditorContext);\n\n  if (!editor) {\n    throw new Error(\"The `useEditor` hook must be used inside the <Slate> component's context.\");\n  }\n\n  return editor;\n};\n/**\r\n * A React context for sharing the editor object, in a way that re-renders the\r\n * context whenever changes occur.\r\n */\n\n\nvar SlateContext = createContext(null);\n/**\r\n * Get the current editor object from the React context.\r\n */\n\nvar useSlate = function useSlate() {\n  var context = useContext(SlateContext);\n\n  if (!context) {\n    throw new Error(\"The `useSlate` hook must be used inside the <SlateProvider> component's context.\");\n  }\n\n  var _context = _slicedToArray(context, 1),\n      editor = _context[0];\n\n  return editor;\n};\n/**\r\n * A wrapper around the provider to handle `onChange` events, because the editor\r\n * is a mutable singleton so it won't ever register as \"changed\" otherwise.\r\n */\n\n\nvar Slate = function Slate(props) {\n  var editor = props.editor,\n      children = props.children,\n      onChange = props.onChange,\n      value = props.value,\n      rest = _objectWithoutProperties(props, [\"editor\", \"children\", \"onChange\", \"value\"]);\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      key = _useState2[0],\n      setKey = _useState2[1];\n\n  var context = useMemo(function () {\n    editor.children = value;\n    Object.assign(editor, rest);\n    return [editor];\n  }, [key, value].concat(_toConsumableArray(Object.values(rest))));\n  var onContextChange = useCallback(function () {\n    onChange(editor.children);\n    setKey(key + 1);\n  }, [key, onChange]);\n  EDITOR_TO_ON_CHANGE.set(editor, onContextChange);\n  useEffect(function () {\n    return function () {\n      EDITOR_TO_ON_CHANGE.set(editor, function () {});\n    };\n  }, []);\n  return React.createElement(SlateContext.Provider, {\n    value: context\n  }, React.createElement(EditorContext.Provider, {\n    value: editor\n  }, React.createElement(FocusedContext.Provider, {\n    value: ReactEditor.isFocused(editor)\n  }, children)));\n};\n/**\r\n * A React context for sharing the `readOnly` state of the editor.\r\n */\n\n\nvar ReadOnlyContext = createContext(false);\n/**\r\n * Get the current `readOnly` state of the editor.\r\n */\n\nvar useReadOnly = function useReadOnly() {\n  return useContext(ReadOnlyContext);\n};\n/**\r\n * A React context for sharing the `selected` state of an element.\r\n */\n\n\nvar SelectedContext = createContext(false);\n/**\r\n * Get the current `selected` state of an element.\r\n */\n\nvar useSelected = function useSelected() {\n  return useContext(SelectedContext);\n};\n/**\r\n * `withReact` adds React and DOM specific behaviors to the editor.\r\n */\n\n\nvar withReact = function withReact(editor) {\n  var e = editor;\n  var apply = e.apply,\n      onChange = e.onChange;\n\n  e.apply = function (op) {\n    var matches = [];\n\n    switch (op.type) {\n      case 'insert_text':\n      case 'remove_text':\n      case 'set_node':\n        {\n          var _iterator = _createForOfIteratorHelper(Editor.levels(e, {\n            at: op.path\n          })),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var _step$value = _slicedToArray(_step.value, 2),\n                  node = _step$value[0],\n                  path = _step$value[1];\n\n              var key = ReactEditor.findKey(e, node);\n              matches.push([path, key]);\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n\n          break;\n        }\n\n      case 'insert_node':\n      case 'remove_node':\n      case 'merge_node':\n      case 'split_node':\n        {\n          var _iterator2 = _createForOfIteratorHelper(Editor.levels(e, {\n            at: Path.parent(op.path)\n          })),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var _step2$value = _slicedToArray(_step2.value, 2),\n                  _node = _step2$value[0],\n                  _path = _step2$value[1];\n\n              var _key = ReactEditor.findKey(e, _node);\n\n              matches.push([_path, _key]);\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n\n          break;\n        }\n    }\n\n    apply(op);\n\n    for (var _i3 = 0, _matches = matches; _i3 < _matches.length; _i3++) {\n      var _matches$_i = _slicedToArray(_matches[_i3], 2),\n          _path2 = _matches$_i[0],\n          _key2 = _matches$_i[1];\n\n      var _Editor$node3 = Editor.node(e, _path2),\n          _Editor$node4 = _slicedToArray(_Editor$node3, 1),\n          _node2 = _Editor$node4[0];\n\n      NODE_TO_KEY.set(_node2, _key2);\n    }\n  };\n\n  e.setFragmentData = function (data) {\n    var selection = e.selection;\n\n    if (!selection) {\n      return;\n    }\n\n    var _Range$edges = Range.edges(selection),\n        _Range$edges2 = _slicedToArray(_Range$edges, 2),\n        start = _Range$edges2[0],\n        end = _Range$edges2[1];\n\n    var startVoid = Editor.void(e, {\n      at: start.path\n    });\n    var endVoid = Editor.void(e, {\n      at: end.path\n    });\n\n    if (Range.isCollapsed(selection) && !startVoid) {\n      return;\n    } // Create a fake selection so that we can add a Base64-encoded copy of the\n    // fragment to the HTML, to decode on future pastes.\n\n\n    var domRange = ReactEditor.toDOMRange(e, selection);\n    var contents = domRange.cloneContents();\n    var attach = contents.childNodes[0]; // Make sure attach is non-empty, since empty nodes will not get copied.\n\n    contents.childNodes.forEach(function (node) {\n      if (node.textContent && node.textContent.trim() !== '') {\n        attach = node;\n      }\n    }); // COMPAT: If the end node is a void node, we need to move the end of the\n    // range from the void node's spacer span, to the end of the void node's\n    // content, since the spacer is before void's content in the DOM.\n\n    if (endVoid) {\n      var _endVoid = _slicedToArray(endVoid, 1),\n          voidNode = _endVoid[0];\n\n      var r = domRange.cloneRange();\n      var domNode = ReactEditor.toDOMNode(e, voidNode);\n      r.setEndAfter(domNode);\n      contents = r.cloneContents();\n    } // COMPAT: If the start node is a void node, we need to attach the encoded\n    // fragment to the void node's content node instead of the spacer, because\n    // attaching it to empty `<div>/<span>` nodes will end up having it erased by\n    // most browsers. (2018/04/27)\n\n\n    if (startVoid) {\n      attach = contents.querySelector('[data-slate-spacer]');\n    } // Remove any zero-width space spans from the cloned DOM so that they don't\n    // show up elsewhere when pasted.\n\n\n    Array.from(contents.querySelectorAll('[data-slate-zero-width]')).forEach(function (zw) {\n      var isNewline = zw.getAttribute('data-slate-zero-width') === 'n';\n      zw.textContent = isNewline ? '\\n' : '';\n    }); // Set a `data-slate-fragment` attribute on a non-empty node, so it shows up\n    // in the HTML, and can be used for intra-Slate pasting. If it's a text\n    // node, wrap it in a `<span>` so we have something to set an attribute on.\n\n    if (isDOMText(attach)) {\n      var span = document.createElement('span'); // COMPAT: In Chrome and Safari, if we don't add the `white-space` style\n      // then leading and trailing spaces will be ignored. (2017/09/21)\n\n      span.style.whiteSpace = 'pre';\n      span.appendChild(attach);\n      contents.appendChild(span);\n      attach = span;\n    }\n\n    var fragment = e.getFragment();\n    var string = JSON.stringify(fragment);\n    var encoded = window.btoa(encodeURIComponent(string));\n    attach.setAttribute('data-slate-fragment', encoded);\n    data.setData('application/x-slate-fragment', encoded); // Add the content to a <div> so that we can get its inner HTML.\n\n    var div = document.createElement('div');\n    div.appendChild(contents);\n    div.setAttribute('hidden', 'true');\n    document.body.appendChild(div);\n    data.setData('text/html', div.innerHTML);\n    data.setData('text/plain', getPlainText(div));\n    document.body.removeChild(div);\n  };\n\n  e.insertData = function (data) {\n    var fragment = data.getData('application/x-slate-fragment');\n\n    if (fragment) {\n      var decoded = decodeURIComponent(window.atob(fragment));\n      var parsed = JSON.parse(decoded);\n      e.insertFragment(parsed);\n      return;\n    }\n\n    var text = data.getData('text/plain');\n\n    if (text) {\n      var lines = text.split(/\\r\\n|\\r|\\n/);\n      var split = false;\n\n      var _iterator3 = _createForOfIteratorHelper(lines),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var line = _step3.value;\n\n          if (split) {\n            Transforms.splitNodes(e, {\n              always: true\n            });\n          }\n\n          e.insertText(line);\n          split = true;\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  };\n\n  e.onChange = function () {\n    // COMPAT: React doesn't batch `setState` hook calls, which means that the\n    // children and selection can get out of sync for one render pass. So we\n    // have to use this unstable API to ensure it batches them. (2019/12/03)\n    // https://github.com/facebook/react/issues/14259#issuecomment-439702367\n    ReactDOM.unstable_batchedUpdates(function () {\n      var onContextChange = EDITOR_TO_ON_CHANGE.get(e);\n\n      if (onContextChange) {\n        onContextChange();\n      }\n\n      onChange();\n    });\n  };\n\n  return e;\n};\n/**\r\n * Leaf content strings.\r\n */\n\n\nvar String = function String(props) {\n  var isLast = props.isLast,\n      leaf = props.leaf,\n      parent = props.parent,\n      text = props.text;\n  var editor = useEditor();\n  var path = ReactEditor.findPath(editor, text);\n  var parentPath = Path.parent(path); // COMPAT: Render text inside void nodes with a zero-width space.\n  // So the node can contain selection but the text is not visible.\n\n  if (editor.isVoid(parent)) {\n    return React.createElement(ZeroWidthString, {\n      length: Node$1.string(parent).length\n    });\n  } // COMPAT: If this is the last text node in an empty block, render a zero-\n  // width space that will convert into a line break when copying and pasting\n  // to support expected plain text.\n\n\n  if (leaf.text === '' && parent.children[parent.children.length - 1] === text && !editor.isInline(parent) && Editor.string(editor, parentPath) === '') {\n    return React.createElement(ZeroWidthString, {\n      isLineBreak: true\n    });\n  } // COMPAT: If the text is empty, it's because it's on the edge of an inline\n  // node, so we render a zero-width space so that the selection can be\n  // inserted next to it still.\n\n\n  if (leaf.text === '') {\n    return React.createElement(ZeroWidthString, null);\n  } // COMPAT: Browsers will collapse trailing new lines at the end of blocks,\n  // so we need to add an extra trailing new lines to prevent that.\n\n\n  if (isLast && leaf.text.slice(-1) === '\\n') {\n    return React.createElement(TextString, {\n      isTrailing: true,\n      text: leaf.text\n    });\n  }\n\n  return React.createElement(TextString, {\n    text: leaf.text\n  });\n};\n/**\r\n * Leaf strings with text in them.\r\n */\n\n\nvar TextString = function TextString(props) {\n  var text = props.text,\n      _props$isTrailing = props.isTrailing,\n      isTrailing = _props$isTrailing === void 0 ? false : _props$isTrailing;\n  return React.createElement(\"span\", {\n    \"data-slate-string\": true\n  }, text, isTrailing ? '\\n' : null);\n};\n/**\r\n * Leaf strings without text, render as zero-width strings.\r\n */\n\n\nvar ZeroWidthString = function ZeroWidthString(props) {\n  var _props$length = props.length,\n      length = _props$length === void 0 ? 0 : _props$length,\n      _props$isLineBreak = props.isLineBreak,\n      isLineBreak = _props$isLineBreak === void 0 ? false : _props$isLineBreak;\n  return React.createElement(\"span\", {\n    \"data-slate-zero-width\": isLineBreak ? 'n' : 'z',\n    \"data-slate-length\": length\n  }, \"\\uFEFF\", isLineBreak ? React.createElement(\"br\", null) : null);\n};\n/**\r\n * Individual leaves in a text node with unique formatting.\r\n */\n\n\nvar Leaf = function Leaf(props) {\n  var leaf = props.leaf,\n      isLast = props.isLast,\n      text = props.text,\n      parent = props.parent,\n      _props$renderLeaf = props.renderLeaf,\n      renderLeaf = _props$renderLeaf === void 0 ? function (props) {\n    return React.createElement(DefaultLeaf, Object.assign({}, props));\n  } : _props$renderLeaf;\n  var children = React.createElement(String, {\n    isLast: isLast,\n    leaf: leaf,\n    parent: parent,\n    text: text\n  });\n\n  if (leaf[PLACEHOLDER_SYMBOL]) {\n    children = React.createElement(React.Fragment, null, React.createElement(\"span\", {\n      contentEditable: false,\n      style: {\n        pointerEvents: 'none',\n        display: 'inline-block',\n        width: '0',\n        maxWidth: '100%',\n        whiteSpace: 'nowrap',\n        opacity: '0.333',\n        userSelect: 'none',\n        fontStyle: 'normal',\n        fontWeight: 'normal',\n        textDecoration: 'none'\n      }\n    }, leaf.placeholder), children);\n  } // COMPAT: Having the `data-` attributes on these leaf elements ensures that\n  // in certain misbehaving browsers they aren't weirdly cloned/destroyed by\n  // contenteditable behaviors. (2019/05/08)\n\n\n  var attributes = {\n    'data-slate-leaf': true\n  };\n  return renderLeaf({\n    attributes: attributes,\n    children: children,\n    leaf: leaf,\n    text: text\n  });\n};\n\nvar MemoizedLeaf = React.memo(Leaf, function (prev, next) {\n  return next.parent === prev.parent && next.isLast === prev.isLast && next.renderLeaf === prev.renderLeaf && next.text === prev.text && Text$1.matches(next.leaf, prev.leaf);\n});\n/**\r\n * The default custom leaf renderer.\r\n */\n\nvar DefaultLeaf = function DefaultLeaf(props) {\n  var attributes = props.attributes,\n      children = props.children;\n  return React.createElement(\"span\", Object.assign({}, attributes), children);\n};\n/**\r\n * Prevent warning on SSR by falling back to useEffect when window is not defined\r\n */\n\n\nvar useIsomorphicLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect;\n/**\r\n * Text.\r\n */\n\nvar Text = function Text(props) {\n  var decorations = props.decorations,\n      isLast = props.isLast,\n      parent = props.parent,\n      renderLeaf = props.renderLeaf,\n      text = props.text;\n  var editor = useEditor();\n  var ref = useRef(null);\n  var leaves = Text$1.decorations(text, decorations);\n  var key = ReactEditor.findKey(editor, text);\n  var children = [];\n\n  for (var i = 0; i < leaves.length; i++) {\n    var leaf = leaves[i];\n    children.push(React.createElement(MemoizedLeaf, {\n      isLast: isLast && i === leaves.length - 1,\n      key: \"\".concat(key.id, \"-\").concat(i),\n      leaf: leaf,\n      text: text,\n      parent: parent,\n      renderLeaf: renderLeaf\n    }));\n  } // Update element-related weak maps with the DOM element ref.\n\n\n  useIsomorphicLayoutEffect(function () {\n    if (ref.current) {\n      KEY_TO_ELEMENT.set(key, ref.current);\n      NODE_TO_ELEMENT.set(text, ref.current);\n      ELEMENT_TO_NODE.set(ref.current, text);\n    } else {\n      KEY_TO_ELEMENT.delete(key);\n      NODE_TO_ELEMENT.delete(text);\n    }\n  });\n  return React.createElement(\"span\", {\n    \"data-slate-node\": \"text\",\n    ref: ref\n  }, children);\n};\n\nvar MemoizedText = React.memo(Text, function (prev, next) {\n  return next.parent === prev.parent && next.isLast === prev.isLast && next.renderLeaf === prev.renderLeaf && next.text === prev.text;\n});\n/**\r\n * Element.\r\n */\n\nvar Element = function Element(props) {\n  var decorate = props.decorate,\n      decorations = props.decorations,\n      element = props.element,\n      _props$renderElement = props.renderElement,\n      renderElement = _props$renderElement === void 0 ? function (p) {\n    return React.createElement(DefaultElement, Object.assign({}, p));\n  } : _props$renderElement,\n      renderLeaf = props.renderLeaf,\n      selection = props.selection;\n  var ref = useRef(null);\n  var editor = useEditor();\n  var readOnly = useReadOnly();\n  var isInline = editor.isInline(element);\n  var key = ReactEditor.findKey(editor, element);\n  var children = React.createElement(Children, {\n    decorate: decorate,\n    decorations: decorations,\n    node: element,\n    renderElement: renderElement,\n    renderLeaf: renderLeaf,\n    selection: selection\n  }); // Attributes that the developer must mix into the element in their\n  // custom node renderer component.\n\n  var attributes = {\n    'data-slate-node': 'element',\n    ref: ref\n  };\n\n  if (isInline) {\n    attributes['data-slate-inline'] = true;\n  } // If it's a block node with inline children, add the proper `dir` attribute\n  // for text direction.\n\n\n  if (!isInline && Editor.hasInlines(editor, element)) {\n    var text = Node$1.string(element);\n    var dir = getDirection(text);\n\n    if (dir === 'rtl') {\n      attributes.dir = dir;\n    }\n  } // If it's a void node, wrap the children in extra void-specific elements.\n\n\n  if (Editor.isVoid(editor, element)) {\n    attributes['data-slate-void'] = true;\n\n    if (!readOnly && isInline) {\n      attributes.contentEditable = false;\n    }\n\n    var Tag = isInline ? 'span' : 'div';\n\n    var _Node$1$texts = Node$1.texts(element),\n        _Node$1$texts2 = _slicedToArray(_Node$1$texts, 1),\n        _Node$1$texts2$ = _slicedToArray(_Node$1$texts2[0], 1),\n        _text = _Node$1$texts2$[0];\n\n    children = readOnly ? null : React.createElement(Tag, {\n      \"data-slate-spacer\": true,\n      style: {\n        height: '0',\n        color: 'transparent',\n        outline: 'none',\n        position: 'absolute'\n      }\n    }, React.createElement(MemoizedText, {\n      decorations: [],\n      isLast: false,\n      parent: element,\n      text: _text\n    }));\n    NODE_TO_INDEX.set(_text, 0);\n    NODE_TO_PARENT.set(_text, element);\n  } // Update element-related weak maps with the DOM element ref.\n\n\n  useIsomorphicLayoutEffect(function () {\n    if (ref.current) {\n      KEY_TO_ELEMENT.set(key, ref.current);\n      NODE_TO_ELEMENT.set(element, ref.current);\n      ELEMENT_TO_NODE.set(ref.current, element);\n    } else {\n      KEY_TO_ELEMENT.delete(key);\n      NODE_TO_ELEMENT.delete(element);\n    }\n  });\n  return React.createElement(SelectedContext.Provider, {\n    value: !!selection\n  }, renderElement({\n    attributes: attributes,\n    children: children,\n    element: element\n  }));\n};\n\nvar MemoizedElement = React.memo(Element, function (prev, next) {\n  return prev.decorate === next.decorate && prev.element === next.element && prev.renderElement === next.renderElement && prev.renderLeaf === next.renderLeaf && isRangeListEqual(prev.decorations, next.decorations) && (prev.selection === next.selection || !!prev.selection && !!next.selection && Range.equals(prev.selection, next.selection));\n});\n/**\r\n * The default element renderer.\r\n */\n\nvar DefaultElement = function DefaultElement(props) {\n  var attributes = props.attributes,\n      children = props.children,\n      element = props.element;\n  var editor = useEditor();\n  var Tag = editor.isInline(element) ? 'span' : 'div';\n  return React.createElement(Tag, Object.assign({}, attributes, {\n    style: {\n      position: 'relative'\n    }\n  }), children);\n};\n/**\r\n * Check if a list of ranges is equal to another.\r\n *\r\n * PERF: this requires the two lists to also have the ranges inside them in the\r\n * same order, but this is an okay constraint for us since decorations are\r\n * kept in order, and the odd case where they aren't is okay to re-render for.\r\n */\n\n\nvar isRangeListEqual = function isRangeListEqual(list, another) {\n  if (list.length !== another.length) {\n    return false;\n  }\n\n  for (var i = 0; i < list.length; i++) {\n    var range = list[i];\n    var other = another[i];\n\n    if (!Range.equals(range, other)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n/**\r\n * Children.\r\n */\n\n\nvar Children = function Children(props) {\n  var decorate = props.decorate,\n      decorations = props.decorations,\n      node = props.node,\n      renderElement = props.renderElement,\n      renderLeaf = props.renderLeaf,\n      selection = props.selection;\n  var editor = useEditor();\n  var path = ReactEditor.findPath(editor, node);\n  var children = [];\n  var isLeafBlock = Element$1.isElement(node) && !editor.isInline(node) && Editor.hasInlines(editor, node);\n\n  for (var i = 0; i < node.children.length; i++) {\n    var p = path.concat(i);\n    var n = node.children[i];\n    var key = ReactEditor.findKey(editor, n);\n    var range = Editor.range(editor, p);\n    var sel = selection && Range.intersection(range, selection);\n    var ds = decorate([n, p]);\n\n    var _iterator4 = _createForOfIteratorHelper(decorations),\n        _step4;\n\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var dec = _step4.value;\n        var d = Range.intersection(dec, range);\n\n        if (d) {\n          ds.push(d);\n        }\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n\n    if (Element$1.isElement(n)) {\n      children.push(React.createElement(MemoizedElement, {\n        decorate: decorate,\n        decorations: ds,\n        element: n,\n        key: key.id,\n        renderElement: renderElement,\n        renderLeaf: renderLeaf,\n        selection: sel\n      }));\n    } else {\n      children.push(React.createElement(MemoizedText, {\n        decorations: ds,\n        key: key.id,\n        isLast: isLeafBlock && i === node.children.length - 1,\n        parent: node,\n        renderLeaf: renderLeaf,\n        text: n\n      }));\n    }\n\n    NODE_TO_INDEX.set(n, i);\n    NODE_TO_PARENT.set(n, node);\n  }\n\n  return React.createElement(React.Fragment, null, children);\n};\n\nvar IS_IOS = typeof navigator !== 'undefined' && typeof window !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\nvar IS_APPLE = typeof navigator !== 'undefined' && /Mac OS X/.test(navigator.userAgent);\nvar IS_FIREFOX = typeof navigator !== 'undefined' && /^(?!.*Seamonkey)(?=.*Firefox).*/i.test(navigator.userAgent);\nvar IS_SAFARI = typeof navigator !== 'undefined' && /Version\\/[\\d\\.]+.*Safari/.test(navigator.userAgent); // \"modern\" Edge was released at 79.x\n\nvar IS_EDGE_LEGACY = typeof navigator !== 'undefined' && /Edge?\\/(?:[0-6][0-9]|[0-7][0-8])/i.test(navigator.userAgent); // Native beforeInput events don't work well with react on Chrome 75 and older, Chrome 76+ can use beforeInput\n\nvar IS_CHROME_LEGACY = typeof navigator !== 'undefined' && /Chrome?\\/(?:[0-7][0-5]|[0-6][0-9])/i.test(navigator.userAgent);\n/**\r\n * Hotkey mappings for each platform.\r\n */\n\nvar HOTKEYS = {\n  bold: 'mod+b',\n  compose: ['down', 'left', 'right', 'up', 'backspace', 'enter'],\n  moveBackward: 'left',\n  moveForward: 'right',\n  moveWordBackward: 'ctrl+left',\n  moveWordForward: 'ctrl+right',\n  deleteBackward: 'shift?+backspace',\n  deleteForward: 'shift?+delete',\n  extendBackward: 'shift+left',\n  extendForward: 'shift+right',\n  italic: 'mod+i',\n  splitBlock: 'shift?+enter',\n  undo: 'mod+z'\n};\nvar APPLE_HOTKEYS = {\n  moveLineBackward: 'opt+up',\n  moveLineForward: 'opt+down',\n  moveWordBackward: 'opt+left',\n  moveWordForward: 'opt+right',\n  deleteBackward: ['ctrl+backspace', 'ctrl+h'],\n  deleteForward: ['ctrl+delete', 'ctrl+d'],\n  deleteLineBackward: 'cmd+shift?+backspace',\n  deleteLineForward: ['cmd+shift?+delete', 'ctrl+k'],\n  deleteWordBackward: 'opt+shift?+backspace',\n  deleteWordForward: 'opt+shift?+delete',\n  extendLineBackward: 'opt+shift+up',\n  extendLineForward: 'opt+shift+down',\n  redo: 'cmd+shift+z',\n  transposeCharacter: 'ctrl+t'\n};\nvar WINDOWS_HOTKEYS = {\n  deleteWordBackward: 'ctrl+shift?+backspace',\n  deleteWordForward: 'ctrl+shift?+delete',\n  redo: ['ctrl+y', 'ctrl+shift+z']\n};\n/**\r\n * Create a platform-aware hotkey checker.\r\n */\n\nvar create = function create(key) {\n  var generic = HOTKEYS[key];\n  var apple = APPLE_HOTKEYS[key];\n  var windows = WINDOWS_HOTKEYS[key];\n  var isGeneric = generic && isKeyHotkey(generic);\n  var isApple = apple && isKeyHotkey(apple);\n  var isWindows = windows && isKeyHotkey(windows);\n  return function (event) {\n    if (isGeneric && isGeneric(event)) return true;\n    if (IS_APPLE && isApple && isApple(event)) return true;\n    if (!IS_APPLE && isWindows && isWindows(event)) return true;\n    return false;\n  };\n};\n/**\r\n * Hotkeys.\r\n */\n\n\nvar Hotkeys = {\n  isBold: create('bold'),\n  isCompose: create('compose'),\n  isMoveBackward: create('moveBackward'),\n  isMoveForward: create('moveForward'),\n  isDeleteBackward: create('deleteBackward'),\n  isDeleteForward: create('deleteForward'),\n  isDeleteLineBackward: create('deleteLineBackward'),\n  isDeleteLineForward: create('deleteLineForward'),\n  isDeleteWordBackward: create('deleteWordBackward'),\n  isDeleteWordForward: create('deleteWordForward'),\n  isExtendBackward: create('extendBackward'),\n  isExtendForward: create('extendForward'),\n  isExtendLineBackward: create('extendLineBackward'),\n  isExtendLineForward: create('extendLineForward'),\n  isItalic: create('italic'),\n  isMoveLineBackward: create('moveLineBackward'),\n  isMoveLineForward: create('moveLineForward'),\n  isMoveWordBackward: create('moveWordBackward'),\n  isMoveWordForward: create('moveWordForward'),\n  isRedo: create('redo'),\n  isSplitBlock: create('splitBlock'),\n  isTransposeCharacter: create('transposeCharacter'),\n  isUndo: create('undo')\n};\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n} // Chrome Legacy doesn't support `beforeinput` correctly\n\n\nvar HAS_BEFORE_INPUT_SUPPORT = !(IS_FIREFOX || IS_EDGE_LEGACY || IS_CHROME_LEGACY);\n/**\r\n * Editable.\r\n */\n\nvar Editable = function Editable(props) {\n  var autoFocus = props.autoFocus,\n      _props$decorate = props.decorate,\n      decorate = _props$decorate === void 0 ? defaultDecorate : _props$decorate,\n      propsOnDOMBeforeInput = props.onDOMBeforeInput,\n      placeholder = props.placeholder,\n      _props$readOnly = props.readOnly,\n      readOnly = _props$readOnly === void 0 ? false : _props$readOnly,\n      renderElement = props.renderElement,\n      renderLeaf = props.renderLeaf,\n      _props$style = props.style,\n      style = _props$style === void 0 ? {} : _props$style,\n      _props$as = props.as,\n      Component = _props$as === void 0 ? 'div' : _props$as,\n      attributes = _objectWithoutProperties(props, [\"autoFocus\", \"decorate\", \"onDOMBeforeInput\", \"placeholder\", \"readOnly\", \"renderElement\", \"renderLeaf\", \"style\", \"as\"]);\n\n  var editor = useSlate();\n  var ref = useRef(null); // Update internal state on each render.\n\n  IS_READ_ONLY.set(editor, readOnly); // Keep track of some state for the event handler logic.\n\n  var state = useMemo(function () {\n    return {\n      isComposing: false,\n      isUpdatingSelection: false,\n      latestElement: null\n    };\n  }, []); // Update element-related weak maps with the DOM element ref.\n\n  useIsomorphicLayoutEffect(function () {\n    if (ref.current) {\n      EDITOR_TO_ELEMENT.set(editor, ref.current);\n      NODE_TO_ELEMENT.set(editor, ref.current);\n      ELEMENT_TO_NODE.set(ref.current, editor);\n    } else {\n      NODE_TO_ELEMENT.delete(editor);\n    }\n  }); // Whenever the editor updates, make sure the DOM selection state is in sync.\n\n  useIsomorphicLayoutEffect(function () {\n    var selection = editor.selection;\n    var domSelection = window.getSelection();\n\n    if (state.isComposing || !domSelection || !ReactEditor.isFocused(editor)) {\n      return;\n    }\n\n    var hasDomSelection = domSelection.type !== 'None'; // If the DOM selection is properly unset, we're done.\n\n    if (!selection && !hasDomSelection) {\n      return;\n    } // verify that the dom selection is in the editor\n\n\n    var editorElement = EDITOR_TO_ELEMENT.get(editor);\n    var hasDomSelectionInEditor = false;\n\n    if (editorElement.contains(domSelection.anchorNode) && editorElement.contains(domSelection.focusNode)) {\n      hasDomSelectionInEditor = true;\n    } // If the DOM selection is in the editor and the editor selection is already correct, we're done.\n\n\n    if (hasDomSelection && hasDomSelectionInEditor && selection && Range.equals(ReactEditor.toSlateRange(editor, domSelection), selection)) {\n      return;\n    } // Otherwise the DOM selection is out of sync, so update it.\n\n\n    var el = ReactEditor.toDOMNode(editor, editor);\n    state.isUpdatingSelection = true;\n    var newDomRange = selection && ReactEditor.toDOMRange(editor, selection);\n\n    if (newDomRange) {\n      if (Range.isBackward(selection)) {\n        domSelection.setBaseAndExtent(newDomRange.endContainer, newDomRange.endOffset, newDomRange.startContainer, newDomRange.startOffset);\n      } else {\n        domSelection.setBaseAndExtent(newDomRange.startContainer, newDomRange.startOffset, newDomRange.endContainer, newDomRange.endOffset);\n      }\n\n      var leafEl = newDomRange.startContainer.parentElement;\n      scrollIntoView(leafEl, {\n        scrollMode: 'if-needed',\n        boundary: el\n      });\n    } else {\n      domSelection.removeAllRanges();\n    }\n\n    setTimeout(function () {\n      // COMPAT: In Firefox, it's not enough to create a range, you also need\n      // to focus the contenteditable element too. (2016/11/16)\n      if (newDomRange && IS_FIREFOX) {\n        el.focus();\n      }\n\n      state.isUpdatingSelection = false;\n    });\n  }); // The autoFocus TextareaHTMLAttribute doesn't do anything on a div, so it\n  // needs to be manually focused.\n\n  useEffect(function () {\n    if (ref.current && autoFocus) {\n      ref.current.focus();\n    }\n  }, [autoFocus]); // Listen on the native `beforeinput` event to get real \"Level 2\" events. This\n  // is required because React's `beforeinput` is fake and never really attaches\n  // to the real event sadly. (2019/11/01)\n  // https://github.com/facebook/react/issues/11211\n\n  var onDOMBeforeInput = useCallback(function (event) {\n    if (!readOnly && hasEditableTarget(editor, event.target) && !isDOMEventHandled(event, propsOnDOMBeforeInput)) {\n      var selection = editor.selection;\n      var type = event.inputType;\n      var data = event.dataTransfer || event.data || undefined; // These two types occur while a user is composing text and can't be\n      // cancelled. Let them through and wait for the composition to end.\n\n      if (type === 'insertCompositionText' || type === 'deleteCompositionText') {\n        return;\n      }\n\n      event.preventDefault(); // COMPAT: For the deleting forward/backward input types we don't want\n      // to change the selection because it is the range that will be deleted,\n      // and those commands determine that for themselves.\n\n      if (!type.startsWith('delete') || type.startsWith('deleteBy')) {\n        var _event$getTargetRange = event.getTargetRanges(),\n            _event$getTargetRange2 = _slicedToArray(_event$getTargetRange, 1),\n            targetRange = _event$getTargetRange2[0];\n\n        if (targetRange) {\n          var range = ReactEditor.toSlateRange(editor, targetRange);\n\n          if (!selection || !Range.equals(selection, range)) {\n            Transforms.select(editor, range);\n          }\n        }\n      } // COMPAT: If the selection is expanded, even if the command seems like\n      // a delete forward/backward command it should delete the selection.\n\n\n      if (selection && Range.isExpanded(selection) && type.startsWith('delete')) {\n        Editor.deleteFragment(editor);\n        return;\n      }\n\n      switch (type) {\n        case 'deleteByComposition':\n        case 'deleteByCut':\n        case 'deleteByDrag':\n          {\n            Editor.deleteFragment(editor);\n            break;\n          }\n\n        case 'deleteContent':\n        case 'deleteContentForward':\n          {\n            Editor.deleteForward(editor);\n            break;\n          }\n\n        case 'deleteContentBackward':\n          {\n            Editor.deleteBackward(editor);\n            break;\n          }\n\n        case 'deleteEntireSoftLine':\n          {\n            Editor.deleteBackward(editor, {\n              unit: 'line'\n            });\n            Editor.deleteForward(editor, {\n              unit: 'line'\n            });\n            break;\n          }\n\n        case 'deleteHardLineBackward':\n          {\n            Editor.deleteBackward(editor, {\n              unit: 'block'\n            });\n            break;\n          }\n\n        case 'deleteSoftLineBackward':\n          {\n            Editor.deleteBackward(editor, {\n              unit: 'line'\n            });\n            break;\n          }\n\n        case 'deleteHardLineForward':\n          {\n            Editor.deleteForward(editor, {\n              unit: 'block'\n            });\n            break;\n          }\n\n        case 'deleteSoftLineForward':\n          {\n            Editor.deleteForward(editor, {\n              unit: 'line'\n            });\n            break;\n          }\n\n        case 'deleteWordBackward':\n          {\n            Editor.deleteBackward(editor, {\n              unit: 'word'\n            });\n            break;\n          }\n\n        case 'deleteWordForward':\n          {\n            Editor.deleteForward(editor, {\n              unit: 'word'\n            });\n            break;\n          }\n\n        case 'insertLineBreak':\n        case 'insertParagraph':\n          {\n            Editor.insertBreak(editor);\n            break;\n          }\n\n        case 'insertFromComposition':\n        case 'insertFromDrop':\n        case 'insertFromPaste':\n        case 'insertFromYank':\n        case 'insertReplacementText':\n        case 'insertText':\n          {\n            if (data instanceof DataTransfer) {\n              ReactEditor.insertData(editor, data);\n            } else if (typeof data === 'string') {\n              Editor.insertText(editor, data);\n            }\n\n            break;\n          }\n      }\n    }\n  }, [readOnly, propsOnDOMBeforeInput]); // Attach a native DOM event handler for `beforeinput` events, because React's\n  // built-in `onBeforeInput` is actually a leaky polyfill that doesn't expose\n  // real `beforeinput` events sadly... (2019/11/04)\n  // https://github.com/facebook/react/issues/11211\n\n  useIsomorphicLayoutEffect(function () {\n    if (ref.current && HAS_BEFORE_INPUT_SUPPORT) {\n      // @ts-ignore The `beforeinput` event isn't recognized.\n      ref.current.addEventListener('beforeinput', onDOMBeforeInput);\n    }\n\n    return function () {\n      if (ref.current && HAS_BEFORE_INPUT_SUPPORT) {\n        // @ts-ignore The `beforeinput` event isn't recognized.\n        ref.current.removeEventListener('beforeinput', onDOMBeforeInput);\n      }\n    };\n  }, [onDOMBeforeInput]); // Listen on the native `selectionchange` event to be able to update any time\n  // the selection changes. This is required because React's `onSelect` is leaky\n  // and non-standard so it doesn't fire until after a selection has been\n  // released. This causes issues in situations where another change happens\n  // while a selection is being dragged.\n\n  var onDOMSelectionChange = useCallback(throttle(function () {\n    if (!readOnly && !state.isComposing && !state.isUpdatingSelection) {\n      var activeElement = window.document.activeElement;\n      var el = ReactEditor.toDOMNode(editor, editor);\n      var domSelection = window.getSelection();\n\n      if (activeElement === el) {\n        state.latestElement = activeElement;\n        IS_FOCUSED.set(editor, true);\n      } else {\n        IS_FOCUSED.delete(editor);\n      }\n\n      if (!domSelection) {\n        return Transforms.deselect(editor);\n      }\n\n      var anchorNode = domSelection.anchorNode,\n          focusNode = domSelection.focusNode;\n      var anchorNodeSelectable = hasEditableTarget(editor, anchorNode) || isTargetInsideVoid(editor, anchorNode);\n      var focusNodeSelectable = hasEditableTarget(editor, focusNode) || isTargetInsideVoid(editor, focusNode);\n\n      if (anchorNodeSelectable && focusNodeSelectable) {\n        var range = ReactEditor.toSlateRange(editor, domSelection);\n        Transforms.select(editor, range);\n      } else {\n        Transforms.deselect(editor);\n      }\n    }\n  }, 100), [readOnly]); // Attach a native DOM event handler for `selectionchange`, because React's\n  // built-in `onSelect` handler doesn't fire for all selection changes. It's a\n  // leaky polyfill that only fires on keypresses or clicks. Instead, we want to\n  // fire for any change to the selection inside the editor. (2019/11/04)\n  // https://github.com/facebook/react/issues/5785\n\n  useIsomorphicLayoutEffect(function () {\n    window.document.addEventListener('selectionchange', onDOMSelectionChange);\n    return function () {\n      window.document.removeEventListener('selectionchange', onDOMSelectionChange);\n    };\n  }, [onDOMSelectionChange]);\n  var decorations = decorate([editor, []]);\n\n  if (placeholder && editor.children.length === 1 && Array.from(Node$1.texts(editor)).length === 1 && Node$1.string(editor) === '') {\n    var _decorations$push;\n\n    var start = Editor.start(editor, []);\n    decorations.push((_decorations$push = {}, _defineProperty2(_decorations$push, PLACEHOLDER_SYMBOL, true), _defineProperty2(_decorations$push, \"placeholder\", placeholder), _defineProperty2(_decorations$push, \"anchor\", start), _defineProperty2(_decorations$push, \"focus\", start), _decorations$push));\n  }\n\n  return React.createElement(ReadOnlyContext.Provider, {\n    value: readOnly\n  }, React.createElement(Component // COMPAT: The Grammarly Chrome extension works by changing the DOM\n  // out from under `contenteditable` elements, which leads to weird\n  // behaviors so we have to disable it like editor. (2017/04/24)\n  , Object.assign({\n    \"data-gramm\": false,\n    role: readOnly ? undefined : 'textbox'\n  }, attributes, {\n    // COMPAT: Certain browsers don't support the `beforeinput` event, so we'd\n    // have to use hacks to make these replacement-based features work.\n    spellCheck: !HAS_BEFORE_INPUT_SUPPORT ? undefined : attributes.spellCheck,\n    autoCorrect: !HAS_BEFORE_INPUT_SUPPORT ? undefined : attributes.autoCorrect,\n    autoCapitalize: !HAS_BEFORE_INPUT_SUPPORT ? undefined : attributes.autoCapitalize,\n    \"data-slate-editor\": true,\n    \"data-slate-node\": \"value\",\n    contentEditable: readOnly ? undefined : true,\n    suppressContentEditableWarning: true,\n    ref: ref,\n    style: _objectSpread({\n      // Prevent the default outline styles.\n      outline: 'none',\n      // Preserve adjacent whitespace and new lines.\n      whiteSpace: 'pre-wrap',\n      // Allow words to break if they are too long.\n      wordWrap: 'break-word'\n    }, style),\n    onBeforeInput: useCallback(function (event) {\n      // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n      // fall back to React's leaky polyfill instead just for it. It\n      // only works for the `insertText` input type.\n      if (!HAS_BEFORE_INPUT_SUPPORT && !readOnly && !isEventHandled(event, attributes.onBeforeInput) && hasEditableTarget(editor, event.target)) {\n        event.preventDefault();\n        var text = event.data;\n        Editor.insertText(editor, text);\n      }\n    }, [readOnly]),\n    onBlur: useCallback(function (event) {\n      if (readOnly || state.isUpdatingSelection || !hasEditableTarget(editor, event.target) || isEventHandled(event, attributes.onBlur)) {\n        return;\n      } // COMPAT: If the current `activeElement` is still the previous\n      // one, this is due to the window being blurred when the tab\n      // itself becomes unfocused, so we want to abort early to allow to\n      // editor to stay focused when the tab becomes focused again.\n\n\n      if (state.latestElement === window.document.activeElement) {\n        return;\n      }\n\n      var relatedTarget = event.relatedTarget;\n      var el = ReactEditor.toDOMNode(editor, editor); // COMPAT: The event should be ignored if the focus is returning\n      // to the editor from an embedded editable element (eg. an <input>\n      // element inside a void node).\n\n      if (relatedTarget === el) {\n        return;\n      } // COMPAT: The event should be ignored if the focus is moving from\n      // the editor to inside a void node's spacer element.\n\n\n      if (isDOMElement(relatedTarget) && relatedTarget.hasAttribute('data-slate-spacer')) {\n        return;\n      } // COMPAT: The event should be ignored if the focus is moving to a\n      // non- editable section of an element that isn't a void node (eg.\n      // a list item of the check list example).\n\n\n      if (relatedTarget != null && isDOMNode(relatedTarget) && ReactEditor.hasDOMNode(editor, relatedTarget)) {\n        var node = ReactEditor.toSlateNode(editor, relatedTarget);\n\n        if (Element$1.isElement(node) && !editor.isVoid(node)) {\n          return;\n        }\n      }\n\n      IS_FOCUSED.delete(editor);\n    }, [readOnly, attributes.onBlur]),\n    onClick: useCallback(function (event) {\n      if (!readOnly && hasTarget(editor, event.target) && !isEventHandled(event, attributes.onClick) && isDOMNode(event.target)) {\n        var node = ReactEditor.toSlateNode(editor, event.target);\n        var path = ReactEditor.findPath(editor, node);\n\n        var _start = Editor.start(editor, path);\n\n        var end = Editor.end(editor, path);\n        var startVoid = Editor.void(editor, {\n          at: _start\n        });\n        var endVoid = Editor.void(editor, {\n          at: end\n        });\n\n        if (startVoid && endVoid && Path.equals(startVoid[1], endVoid[1])) {\n          var range = Editor.range(editor, _start);\n          Transforms.select(editor, range);\n        }\n      }\n    }, [readOnly, attributes.onClick]),\n    onCompositionEnd: useCallback(function (event) {\n      if (hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onCompositionEnd)) {\n        state.isComposing = false; // COMPAT: In Chrome, `beforeinput` events for compositions\n        // aren't correct and never fire the \"insertFromComposition\"\n        // type that we need. So instead, insert whenever a composition\n        // ends since it will already have been committed to the DOM.\n\n        if (!IS_SAFARI && !IS_FIREFOX && event.data) {\n          Editor.insertText(editor, event.data);\n        }\n      }\n    }, [attributes.onCompositionEnd]),\n    onCompositionStart: useCallback(function (event) {\n      if (hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onCompositionStart)) {\n        state.isComposing = true;\n      }\n    }, [attributes.onCompositionStart]),\n    onCopy: useCallback(function (event) {\n      if (hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onCopy)) {\n        event.preventDefault();\n        ReactEditor.setFragmentData(editor, event.clipboardData);\n      }\n    }, [attributes.onCopy]),\n    onCut: useCallback(function (event) {\n      if (!readOnly && hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onCut)) {\n        event.preventDefault();\n        ReactEditor.setFragmentData(editor, event.clipboardData);\n        var selection = editor.selection;\n\n        if (selection && Range.isExpanded(selection)) {\n          Editor.deleteFragment(editor);\n        }\n      }\n    }, [readOnly, attributes.onCut]),\n    onDragOver: useCallback(function (event) {\n      if (hasTarget(editor, event.target) && !isEventHandled(event, attributes.onDragOver)) {\n        // Only when the target is void, call `preventDefault` to signal\n        // that drops are allowed. Editable content is droppable by\n        // default, and calling `preventDefault` hides the cursor.\n        var node = ReactEditor.toSlateNode(editor, event.target);\n\n        if (Editor.isVoid(editor, node)) {\n          event.preventDefault();\n        }\n      }\n    }, [attributes.onDragOver]),\n    onDragStart: useCallback(function (event) {\n      if (hasTarget(editor, event.target) && !isEventHandled(event, attributes.onDragStart)) {\n        var node = ReactEditor.toSlateNode(editor, event.target);\n        var path = ReactEditor.findPath(editor, node);\n        var voidMatch = Editor.void(editor, {\n          at: path\n        }); // If starting a drag on a void node, make sure it is selected\n        // so that it shows up in the selection's fragment.\n\n        if (voidMatch) {\n          var range = Editor.range(editor, path);\n          Transforms.select(editor, range);\n        }\n\n        ReactEditor.setFragmentData(editor, event.dataTransfer);\n      }\n    }, [attributes.onDragStart]),\n    onDrop: useCallback(function (event) {\n      if (hasTarget(editor, event.target) && !readOnly && !isEventHandled(event, attributes.onDrop)) {\n        // COMPAT: Certain browsers don't fire `beforeinput` events at all, and\n        // Chromium browsers don't properly fire them for files being\n        // dropped into a `contenteditable`. (2019/11/26)\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=1028668\n        if (!HAS_BEFORE_INPUT_SUPPORT || !IS_SAFARI && event.dataTransfer.files.length > 0) {\n          event.preventDefault();\n          var range = ReactEditor.findEventRange(editor, event);\n          var data = event.dataTransfer;\n          Transforms.select(editor, range);\n          ReactEditor.insertData(editor, data);\n        }\n      }\n    }, [readOnly, attributes.onDrop]),\n    onFocus: useCallback(function (event) {\n      if (!readOnly && !state.isUpdatingSelection && hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onFocus)) {\n        var el = ReactEditor.toDOMNode(editor, editor);\n        state.latestElement = window.document.activeElement; // COMPAT: If the editor has nested editable elements, the focus\n        // can go to them. In Firefox, this must be prevented because it\n        // results in issues with keyboard navigation. (2017/03/30)\n\n        if (IS_FIREFOX && event.target !== el) {\n          el.focus();\n          return;\n        }\n\n        IS_FOCUSED.set(editor, true);\n      }\n    }, [readOnly, attributes.onFocus]),\n    onKeyDown: useCallback(function (event) {\n      if (!readOnly && hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onKeyDown)) {\n        var nativeEvent = event.nativeEvent;\n        var selection = editor.selection; // COMPAT: Since we prevent the default behavior on\n        // `beforeinput` events, the browser doesn't think there's ever\n        // any history stack to undo or redo, so we have to manage these\n        // hotkeys ourselves. (2019/11/06)\n\n        if (Hotkeys.isRedo(nativeEvent)) {\n          event.preventDefault();\n\n          if (typeof editor.redo === 'function') {\n            editor.redo();\n          }\n\n          return;\n        }\n\n        if (Hotkeys.isUndo(nativeEvent)) {\n          event.preventDefault();\n\n          if (typeof editor.undo === 'function') {\n            editor.undo();\n          }\n\n          return;\n        } // COMPAT: Certain browsers don't handle the selection updates\n        // properly. In Chrome, the selection isn't properly extended.\n        // And in Firefox, the selection isn't properly collapsed.\n        // (2017/10/17)\n\n\n        if (Hotkeys.isMoveLineBackward(nativeEvent)) {\n          event.preventDefault();\n          Transforms.move(editor, {\n            unit: 'line',\n            reverse: true\n          });\n          return;\n        }\n\n        if (Hotkeys.isMoveLineForward(nativeEvent)) {\n          event.preventDefault();\n          Transforms.move(editor, {\n            unit: 'line'\n          });\n          return;\n        }\n\n        if (Hotkeys.isExtendLineBackward(nativeEvent)) {\n          event.preventDefault();\n          Transforms.move(editor, {\n            unit: 'line',\n            edge: 'focus',\n            reverse: true\n          });\n          return;\n        }\n\n        if (Hotkeys.isExtendLineForward(nativeEvent)) {\n          event.preventDefault();\n          Transforms.move(editor, {\n            unit: 'line',\n            edge: 'focus'\n          });\n          return;\n        } // COMPAT: If a void node is selected, or a zero-width text node\n        // adjacent to an inline is selected, we need to handle these\n        // hotkeys manually because browsers won't be able to skip over\n        // the void node with the zero-width space not being an empty\n        // string.\n\n\n        if (Hotkeys.isMoveBackward(nativeEvent)) {\n          event.preventDefault();\n\n          if (selection && Range.isCollapsed(selection)) {\n            Transforms.move(editor, {\n              reverse: true\n            });\n          } else {\n            Transforms.collapse(editor, {\n              edge: 'start'\n            });\n          }\n\n          return;\n        }\n\n        if (Hotkeys.isMoveForward(nativeEvent)) {\n          event.preventDefault();\n\n          if (selection && Range.isCollapsed(selection)) {\n            Transforms.move(editor);\n          } else {\n            Transforms.collapse(editor, {\n              edge: 'end'\n            });\n          }\n\n          return;\n        }\n\n        if (Hotkeys.isMoveWordBackward(nativeEvent)) {\n          event.preventDefault();\n          Transforms.move(editor, {\n            unit: 'word',\n            reverse: true\n          });\n          return;\n        }\n\n        if (Hotkeys.isMoveWordForward(nativeEvent)) {\n          event.preventDefault();\n          Transforms.move(editor, {\n            unit: 'word'\n          });\n          return;\n        } // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n        // fall back to guessing at the input intention for hotkeys.\n        // COMPAT: In iOS, some of these hotkeys are handled in the\n\n\n        if (!HAS_BEFORE_INPUT_SUPPORT) {\n          // We don't have a core behavior for these, but they change the\n          // DOM if we don't prevent them, so we have to.\n          if (Hotkeys.isBold(nativeEvent) || Hotkeys.isItalic(nativeEvent) || Hotkeys.isTransposeCharacter(nativeEvent)) {\n            event.preventDefault();\n            return;\n          }\n\n          if (Hotkeys.isSplitBlock(nativeEvent)) {\n            event.preventDefault();\n            Editor.insertBreak(editor);\n            return;\n          }\n\n          if (Hotkeys.isDeleteBackward(nativeEvent)) {\n            event.preventDefault();\n\n            if (selection && Range.isExpanded(selection)) {\n              Editor.deleteFragment(editor);\n            } else {\n              Editor.deleteBackward(editor);\n            }\n\n            return;\n          }\n\n          if (Hotkeys.isDeleteForward(nativeEvent)) {\n            event.preventDefault();\n\n            if (selection && Range.isExpanded(selection)) {\n              Editor.deleteFragment(editor);\n            } else {\n              Editor.deleteForward(editor);\n            }\n\n            return;\n          }\n\n          if (Hotkeys.isDeleteLineBackward(nativeEvent)) {\n            event.preventDefault();\n\n            if (selection && Range.isExpanded(selection)) {\n              Editor.deleteFragment(editor);\n            } else {\n              Editor.deleteBackward(editor, {\n                unit: 'line'\n              });\n            }\n\n            return;\n          }\n\n          if (Hotkeys.isDeleteLineForward(nativeEvent)) {\n            event.preventDefault();\n\n            if (selection && Range.isExpanded(selection)) {\n              Editor.deleteFragment(editor);\n            } else {\n              Editor.deleteForward(editor, {\n                unit: 'line'\n              });\n            }\n\n            return;\n          }\n\n          if (Hotkeys.isDeleteWordBackward(nativeEvent)) {\n            event.preventDefault();\n\n            if (selection && Range.isExpanded(selection)) {\n              Editor.deleteFragment(editor);\n            } else {\n              Editor.deleteBackward(editor, {\n                unit: 'word'\n              });\n            }\n\n            return;\n          }\n\n          if (Hotkeys.isDeleteWordForward(nativeEvent)) {\n            event.preventDefault();\n\n            if (selection && Range.isExpanded(selection)) {\n              Editor.deleteFragment(editor);\n            } else {\n              Editor.deleteForward(editor, {\n                unit: 'word'\n              });\n            }\n\n            return;\n          }\n        }\n      }\n    }, [readOnly, attributes.onKeyDown]),\n    onPaste: useCallback(function (event) {\n      // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n      // fall back to React's `onPaste` here instead.\n      // COMPAT: Firefox, Chrome and Safari are not emitting `beforeinput` events\n      // when \"paste without formatting\" option is used.\n      // This unfortunately needs to be handled with paste events instead.\n      if (hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onPaste) && (!HAS_BEFORE_INPUT_SUPPORT || isPlainTextOnlyPaste(event.nativeEvent)) && !readOnly) {\n        event.preventDefault();\n        ReactEditor.insertData(editor, event.clipboardData);\n      }\n    }, [readOnly, attributes.onPaste])\n  }), React.createElement(Children, {\n    decorate: decorate,\n    decorations: decorations,\n    node: editor,\n    renderElement: renderElement,\n    renderLeaf: renderLeaf,\n    selection: editor.selection\n  })));\n};\n/**\r\n * A default memoized decorate function.\r\n */\n\n\nvar defaultDecorate = function defaultDecorate() {\n  return [];\n};\n/**\r\n * Check if the target is in the editor.\r\n */\n\n\nvar hasTarget = function hasTarget(editor, target) {\n  return isDOMNode(target) && ReactEditor.hasDOMNode(editor, target);\n};\n/**\r\n * Check if the target is editable and in the editor.\r\n */\n\n\nvar hasEditableTarget = function hasEditableTarget(editor, target) {\n  return isDOMNode(target) && ReactEditor.hasDOMNode(editor, target, {\n    editable: true\n  });\n};\n/**\r\n * Check if the target is inside void and in the editor.\r\n */\n\n\nvar isTargetInsideVoid = function isTargetInsideVoid(editor, target) {\n  var slateNode = hasTarget(editor, target) && ReactEditor.toSlateNode(editor, target);\n  return Editor.isVoid(editor, slateNode);\n};\n/**\r\n * Check if an event is overrided by a handler.\r\n */\n\n\nvar isEventHandled = function isEventHandled(event, handler) {\n  if (!handler) {\n    return false;\n  }\n\n  handler(event);\n  return event.isDefaultPrevented() || event.isPropagationStopped();\n};\n/**\r\n * Check if a DOM event is overrided by a handler.\r\n */\n\n\nvar isDOMEventHandled = function isDOMEventHandled(event, handler) {\n  if (!handler) {\n    return false;\n  }\n\n  handler(event);\n  return event.defaultPrevented;\n};\n\nexport { DefaultElement, DefaultLeaf, Editable, ReactEditor, Slate, useEditor, useFocused, useReadOnly, useSelected, useSlate, withReact };","map":{"version":3,"sources":["../../../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../../../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../../../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../src/utils/key.ts","../src/utils/weak-maps.ts","../src/utils/dom.ts","../src/plugin/react-editor.ts","../src/hooks/use-focused.ts","../src/hooks/use-editor.tsx","../src/hooks/use-slate.tsx","../src/components/slate.tsx","../src/hooks/use-read-only.ts","../src/hooks/use-selected.ts","../src/plugin/with-react.ts","../src/components/string.tsx","../src/components/leaf.tsx","../src/hooks/use-isomorphic-layout-effect.ts","../src/components/text.tsx","../src/components/element.tsx","../src/components/children.tsx","../src/utils/environment.ts","../src/utils/hotkeys.ts","../src/components/editable.tsx"],"names":["objectWithoutPropertiesLoose","n","Key","constructor","NODE_TO_INDEX","NODE_TO_PARENT","EDITOR_TO_ELEMENT","ELEMENT_TO_NODE","KEY_TO_ELEMENT","NODE_TO_ELEMENT","NODE_TO_KEY","IS_READ_ONLY","IS_FOCUSED","EDITOR_TO_ON_CHANGE","PLACEHOLDER_SYMBOL","Symbol","isDOMComment","value","isDOMNode","isDOMElement","isDOMText","isPlainTextOnlyPaste","event","normalizeDOMPoint","domPoint","node","isLast","offset","direction","index","getEditableChild","i","childNodes","child","triedForward","triedBackward","getPlainText","domNode","text","childNode","Array","display","getComputedStyle","ReactEditor","findKey","key","findPath","path","parent","Editor","JSON","isFocused","isReadOnly","blur","el","window","focus","preventScroll","deselect","selection","domSelection","Transforms","hasDOMNode","options","editable","editorEl","targetEl","target","err","insertData","editor","setFragmentData","toDOMNode","toDOMPoint","point","at","selector","texts","start","length","attr","trueLength","parseInt","end","Math","toDOMRange","isBackward","Range","domAnchor","domFocus","domRange","startEl","startNode","isStartAtZeroWidth","endEl","endNode","isEndAtZeroWidth","toSlateNode","domEl","findEventRange","clientX","clientY","x","y","rect","isPrev","edge","range","document","position","toSlatePoint","parentNode","nearestNode","textNode","voidNode","leafNode","contents","removals","slateNode","toSlateRange","anchorNode","anchorOffset","focusNode","focusOffset","isCollapsed","anchor","FocusedContext","createContext","useFocused","useContext","EditorContext","useEditor","SlateContext","useSlate","context","Slate","props","useState","useMemo","Object","onContextChange","useCallback","onChange","setKey","useEffect","ReadOnlyContext","useReadOnly","SelectedContext","useSelected","withReact","e","op","matches","Path","apply","data","startVoid","endVoid","attach","r","zw","isNewline","span","fragment","string","encoded","encodeURIComponent","div","decoded","decodeURIComponent","parsed","lines","split","always","ReactDOM","String","parentPath","Node","leaf","isLineBreak","React","isTrailing","TextString","ZeroWidthString","Leaf","renderLeaf","children","contentEditable","style","pointerEvents","width","maxWidth","whiteSpace","opacity","userSelect","fontStyle","fontWeight","textDecoration","attributes","MemoizedLeaf","next","prev","Text","DefaultLeaf","useIsomorphicLayoutEffect","ref","useRef","leaves","SlateText","MemoizedText","Element","renderElement","p","readOnly","isInline","decorate","decorations","element","dir","getDirection","Tag","height","color","outline","MemoizedElement","isRangeListEqual","DefaultElement","list","another","other","Children","isLeafBlock","sel","ds","d","id","IS_IOS","navigator","IS_APPLE","IS_FIREFOX","IS_SAFARI","IS_EDGE_LEGACY","IS_CHROME_LEGACY","HOTKEYS","bold","compose","moveBackward","moveForward","moveWordBackward","moveWordForward","deleteBackward","deleteForward","extendBackward","extendForward","italic","splitBlock","undo","APPLE_HOTKEYS","moveLineBackward","moveLineForward","deleteLineBackward","deleteLineForward","deleteWordBackward","deleteWordForward","extendLineBackward","extendLineForward","redo","transposeCharacter","WINDOWS_HOTKEYS","create","generic","apple","windows","isGeneric","isKeyHotkey","isApple","isWindows","isBold","isCompose","isMoveBackward","isMoveForward","isDeleteBackward","isDeleteForward","isDeleteLineBackward","isDeleteLineForward","isDeleteWordBackward","isDeleteWordForward","isExtendBackward","isExtendForward","isExtendLineBackward","isExtendLineForward","isItalic","isMoveLineBackward","isMoveLineForward","isMoveWordBackward","isMoveWordForward","isRedo","isSplitBlock","isTransposeCharacter","isUndo","HAS_BEFORE_INPUT_SUPPORT","Editable","onDOMBeforeInput","as","Component","state","isComposing","isUpdatingSelection","latestElement","hasDomSelection","editorElement","hasDomSelectionInEditor","newDomRange","leafEl","scrollIntoView","scrollMode","boundary","setTimeout","hasEditableTarget","isDOMEventHandled","inputType","type","unit","onDOMSelectionChange","throttle","activeElement","anchorNodeSelectable","isTargetInsideVoid","focusNodeSelectable","placeholder","role","spellCheck","autoCorrect","autoCapitalize","suppressContentEditableWarning","wordWrap","onBeforeInput","isEventHandled","onBlur","relatedTarget","onClick","hasTarget","onCompositionEnd","onCompositionStart","onCopy","onCut","onDragOver","onDragStart","voidMatch","onDrop","onFocus","onKeyDown","nativeEvent","Hotkeys","reverse","onPaste","defaultDecorate","handler"],"mappings":"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","sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","/**\n * An auto-incrementing identifier for keys.\n */\n\nlet n = 0\n\n/**\n * A class that keeps track of a key string. We use a full class here because we\n * want to be able to use them as keys in `WeakMap` objects.\n */\n\nexport class Key {\n  id: string\n\n  constructor() {\n    this.id = `${n++}`\n  }\n}\n","import { Node, Ancestor, Editor, Range } from 'slate'\n\nimport { Key } from './key'\n\n/**\n * Two weak maps that allow us rebuild a path given a node. They are populated\n * at render time such that after a render occurs we can always backtrack.\n */\n\nexport const NODE_TO_INDEX: WeakMap<Node, number> = new WeakMap()\nexport const NODE_TO_PARENT: WeakMap<Node, Ancestor> = new WeakMap()\n\n/**\n * Weak maps that allow us to go between Slate nodes and DOM nodes. These\n * are used to resolve DOM event-related logic into Slate actions.\n */\n\nexport const EDITOR_TO_ELEMENT: WeakMap<Editor, HTMLElement> = new WeakMap()\nexport const EDITOR_TO_PLACEHOLDER: WeakMap<Editor, string> = new WeakMap()\nexport const ELEMENT_TO_NODE: WeakMap<HTMLElement, Node> = new WeakMap()\nexport const KEY_TO_ELEMENT: WeakMap<Key, HTMLElement> = new WeakMap()\nexport const NODE_TO_ELEMENT: WeakMap<Node, HTMLElement> = new WeakMap()\nexport const NODE_TO_KEY: WeakMap<Node, Key> = new WeakMap()\n\n/**\n * Weak maps for storing editor-related state.\n */\n\nexport const IS_READ_ONLY: WeakMap<Editor, boolean> = new WeakMap()\nexport const IS_FOCUSED: WeakMap<Editor, boolean> = new WeakMap()\nexport const IS_DRAGGING: WeakMap<Editor, boolean> = new WeakMap()\nexport const IS_CLICKING: WeakMap<Editor, boolean> = new WeakMap()\n\n/**\n * Weak map for associating the context `onChange` context with the plugin.\n */\n\nexport const EDITOR_TO_ON_CHANGE = new WeakMap<Editor, () => void>()\n\n/**\n * Symbols.\n */\n\nexport const PLACEHOLDER_SYMBOL = (Symbol('placeholder') as unknown) as string\n","/**\n * Types.\n */\n\n// COMPAT: This is required to prevent TypeScript aliases from doing some very\n// weird things for Slate's types with the same name as globals. (2019/11/27)\n// https://github.com/microsoft/TypeScript/issues/35002\nimport DOMNode = globalThis.Node\nimport DOMComment = globalThis.Comment\nimport DOMElement = globalThis.Element\nimport DOMText = globalThis.Text\nimport DOMRange = globalThis.Range\nimport DOMSelection = globalThis.Selection\nimport DOMStaticRange = globalThis.StaticRange\nexport {\n  DOMNode,\n  DOMComment,\n  DOMElement,\n  DOMText,\n  DOMRange,\n  DOMSelection,\n  DOMStaticRange,\n}\n\nexport type DOMPoint = [Node, number]\n\n/**\n * Check if a DOM node is a comment node.\n */\n\nexport const isDOMComment = (value: any): value is DOMComment => {\n  return isDOMNode(value) && value.nodeType === 8\n}\n\n/**\n * Check if a DOM node is an element node.\n */\n\nexport const isDOMElement = (value: any): value is DOMElement => {\n  return isDOMNode(value) && value.nodeType === 1\n}\n\n/**\n * Check if a value is a DOM node.\n */\n\nexport const isDOMNode = (value: any): value is DOMNode => {\n  return value instanceof Node\n}\n\n/**\n * Check if a DOM node is an element node.\n */\n\nexport const isDOMText = (value: any): value is DOMText => {\n  return isDOMNode(value) && value.nodeType === 3\n}\n\n/**\n * Checks whether a paste event is a plaintext-only event.\n */\n\nexport const isPlainTextOnlyPaste = (event: ClipboardEvent) => {\n  return (\n    event.clipboardData &&\n    event.clipboardData.getData('text/plain') !== '' &&\n    event.clipboardData.types.length === 1\n  )\n}\n\n/**\n * Normalize a DOM point so that it always refers to a text node.\n */\n\nexport const normalizeDOMPoint = (domPoint: DOMPoint): DOMPoint => {\n  let [node, offset] = domPoint\n\n  // If it's an element node, its offset refers to the index of its children\n  // including comment nodes, so try to find the right text child node.\n  if (isDOMElement(node) && node.childNodes.length) {\n    const isLast = offset === node.childNodes.length\n    const direction = isLast ? 'backward' : 'forward'\n    const index = isLast ? offset - 1 : offset\n    node = getEditableChild(node, index, direction)\n\n    // If the node has children, traverse until we have a leaf node. Leaf nodes\n    // can be either text nodes, or other void DOM nodes.\n    while (isDOMElement(node) && node.childNodes.length) {\n      const i = isLast ? node.childNodes.length - 1 : 0\n      node = getEditableChild(node, i, direction)\n    }\n\n    // Determine the new offset inside the text node.\n    offset = isLast && node.textContent != null ? node.textContent.length : 0\n  }\n\n  // Return the node and offset.\n  return [node, offset]\n}\n\n/**\n * Get the nearest editable child at `index` in a `parent`, preferring\n * `direction`.\n */\n\nexport const getEditableChild = (\n  parent: DOMElement,\n  index: number,\n  direction: 'forward' | 'backward'\n): DOMNode => {\n  const { childNodes } = parent\n  let child = childNodes[index]\n  let i = index\n  let triedForward = false\n  let triedBackward = false\n\n  // While the child is a comment node, or an element node with no children,\n  // keep iterating to find a sibling non-void, non-comment node.\n  while (\n    isDOMComment(child) ||\n    (isDOMElement(child) && child.childNodes.length === 0) ||\n    (isDOMElement(child) && child.getAttribute('contenteditable') === 'false')\n  ) {\n    if (triedForward && triedBackward) {\n      break\n    }\n\n    if (i >= childNodes.length) {\n      triedForward = true\n      i = index - 1\n      direction = 'backward'\n      continue\n    }\n\n    if (i < 0) {\n      triedBackward = true\n      i = index + 1\n      direction = 'forward'\n      continue\n    }\n\n    child = childNodes[i]\n    i += direction === 'forward' ? 1 : -1\n  }\n\n  return child\n}\n\n/**\n * Get a plaintext representation of the content of a node, accounting for block\n * elements which get a newline appended.\n *\n * The domNode must be attached to the DOM.\n */\n\nexport const getPlainText = (domNode: DOMNode) => {\n  let text = ''\n\n  if (isDOMText(domNode) && domNode.nodeValue) {\n    return domNode.nodeValue\n  }\n\n  if (isDOMElement(domNode)) {\n    for (const childNode of Array.from(domNode.childNodes)) {\n      text += getPlainText(childNode)\n    }\n\n    const display = getComputedStyle(domNode).getPropertyValue('display')\n\n    if (display === 'block' || display === 'list' || domNode.tagName === 'BR') {\n      text += '\\n'\n    }\n  }\n\n  return text\n}\n","import { Editor, Node, Path, Point, Range, Transforms, Descendant } from 'slate'\n\nimport { Key } from '../utils/key'\nimport {\n  EDITOR_TO_ELEMENT,\n  ELEMENT_TO_NODE,\n  IS_FOCUSED,\n  IS_READ_ONLY,\n  KEY_TO_ELEMENT,\n  NODE_TO_INDEX,\n  NODE_TO_KEY,\n  NODE_TO_PARENT,\n} from '../utils/weak-maps'\nimport {\n  DOMElement,\n  DOMNode,\n  DOMPoint,\n  DOMRange,\n  DOMSelection,\n  DOMStaticRange,\n  isDOMElement,\n  normalizeDOMPoint,\n} from '../utils/dom'\n\n/**\n * A React and DOM-specific version of the `Editor` interface.\n */\n\nexport interface ReactEditor extends Editor {\n  insertData: (data: DataTransfer) => void\n  setFragmentData: (data: DataTransfer) => void\n}\n\nexport const ReactEditor = {\n  /**\n   * Find a key for a Slate node.\n   */\n\n  findKey(editor: ReactEditor, node: Node): Key {\n    let key = NODE_TO_KEY.get(node)\n\n    if (!key) {\n      key = new Key()\n      NODE_TO_KEY.set(node, key)\n    }\n\n    return key\n  },\n\n  /**\n   * Find the path of Slate node.\n   */\n\n  findPath(editor: ReactEditor, node: Node): Path {\n    const path: Path = []\n    let child = node\n\n    while (true) {\n      const parent = NODE_TO_PARENT.get(child)\n\n      if (parent == null) {\n        if (Editor.isEditor(child)) {\n          return path\n        } else {\n          break\n        }\n      }\n\n      const i = NODE_TO_INDEX.get(child)\n\n      if (i == null) {\n        break\n      }\n\n      path.unshift(i)\n      child = parent\n    }\n\n    throw new Error(\n      `Unable to find the path for Slate node: ${JSON.stringify(node)}`\n    )\n  },\n\n  /**\n   * Check if the editor is focused.\n   */\n\n  isFocused(editor: ReactEditor): boolean {\n    return !!IS_FOCUSED.get(editor)\n  },\n\n  /**\n   * Check if the editor is in read-only mode.\n   */\n\n  isReadOnly(editor: ReactEditor): boolean {\n    return !!IS_READ_ONLY.get(editor)\n  },\n\n  /**\n   * Blur the editor.\n   */\n\n  blur(editor: ReactEditor): void {\n    const el = ReactEditor.toDOMNode(editor, editor)\n    IS_FOCUSED.set(editor, false)\n\n    if (window.document.activeElement === el) {\n      el.blur()\n    }\n  },\n\n  /**\n   * Focus the editor.\n   */\n\n  focus(editor: ReactEditor): void {\n    const el = ReactEditor.toDOMNode(editor, editor)\n    IS_FOCUSED.set(editor, true)\n\n    if (window.document.activeElement !== el) {\n      el.focus({ preventScroll: true })\n    }\n  },\n\n  /**\n   * Deselect the editor.\n   */\n\n  deselect(editor: ReactEditor): void {\n    const { selection } = editor\n    const domSelection = window.getSelection()\n\n    if (domSelection && domSelection.rangeCount > 0) {\n      domSelection.removeAllRanges()\n    }\n\n    if (selection) {\n      Transforms.deselect(editor)\n    }\n  },\n\n  /**\n   * Check if a DOM node is within the editor.\n   */\n\n  hasDOMNode(\n    editor: ReactEditor,\n    target: DOMNode,\n    options: { editable?: boolean } = {}\n  ): boolean {\n    const { editable = false } = options\n    const editorEl = ReactEditor.toDOMNode(editor, editor)\n    let targetEl\n\n    // COMPAT: In Firefox, reading `target.nodeType` will throw an error if\n    // target is originating from an internal \"restricted\" element (e.g. a\n    // stepper arrow on a number input). (2018/05/04)\n    // https://github.com/ianstormtaylor/slate/issues/1819\n    try {\n      targetEl = (isDOMElement(target)\n        ? target\n        : target.parentElement) as HTMLElement\n    } catch (err) {\n      if (\n        !err.message.includes('Permission denied to access property \"nodeType\"')\n      ) {\n        throw err\n      }\n    }\n\n    if (!targetEl) {\n      return false\n    }\n\n    return (\n      targetEl.closest(`[data-slate-editor]`) === editorEl &&\n      (!editable ||\n        targetEl.isContentEditable ||\n        !!targetEl.getAttribute('data-slate-zero-width'))\n    )\n  },\n\n  /**\n   * Insert data from a `DataTransfer` into the editor.\n   */\n\n  insertData(editor: ReactEditor, data: DataTransfer): void {\n    editor.insertData(data)\n  },\n\n  /**\n   * Sets data from the currently selected fragment on a `DataTransfer`.\n   */\n\n  setFragmentData(editor: ReactEditor, data: DataTransfer): void {\n    editor.setFragmentData(data)\n  },\n\n  /**\n   * Find the native DOM element from a Slate node.\n   */\n\n  toDOMNode(editor: ReactEditor, node: Node): HTMLElement {\n    const domNode = Editor.isEditor(node)\n      ? EDITOR_TO_ELEMENT.get(editor)\n      : KEY_TO_ELEMENT.get(ReactEditor.findKey(editor, node))\n\n    if (!domNode) {\n      throw new Error(\n        `Cannot resolve a DOM node from Slate node: ${JSON.stringify(node)}`\n      )\n    }\n\n    return domNode\n  },\n\n  /**\n   * Find a native DOM selection point from a Slate point.\n   */\n\n  toDOMPoint(editor: ReactEditor, point: Point): DOMPoint {\n    const [node] = Editor.node(editor, point.path)\n    const el = ReactEditor.toDOMNode(editor, node)\n    let domPoint: DOMPoint | undefined\n\n    // If we're inside a void node, force the offset to 0, otherwise the zero\n    // width spacing character will result in an incorrect offset of 1\n    if (Editor.void(editor, { at: point })) {\n      point = { path: point.path, offset: 0 }\n    }\n\n    // For each leaf, we need to isolate its content, which means filtering\n    // to its direct text and zero-width spans. (We have to filter out any\n    // other siblings that may have been rendered alongside them.)\n    const selector = `[data-slate-string], [data-slate-zero-width]`\n    const texts = Array.from(el.querySelectorAll(selector))\n    let start = 0\n\n    for (const text of texts) {\n      const domNode = text.childNodes[0] as HTMLElement\n\n      if (domNode == null || domNode.textContent == null) {\n        continue\n      }\n\n      const { length } = domNode.textContent\n      const attr = text.getAttribute('data-slate-length')\n      const trueLength = attr == null ? length : parseInt(attr, 10)\n      const end = start + trueLength\n\n      if (point.offset <= end) {\n        const offset = Math.min(length, Math.max(0, point.offset - start))\n        domPoint = [domNode, offset]\n        break\n      }\n\n      start = end\n    }\n\n    if (!domPoint) {\n      throw new Error(\n        `Cannot resolve a DOM point from Slate point: ${JSON.stringify(point)}`\n      )\n    }\n\n    return domPoint\n  },\n\n  /**\n   * Find a native DOM range from a Slate `range`.\n   *\n   * Notice: the returned range will always be ordinal regardless of the direction of Slate `range` due to DOM API limit.\n   *\n   * there is no way to create a reverse DOM Range using Range.setStart/setEnd\n   * according to https://dom.spec.whatwg.org/#concept-range-bp-set.\n   */\n\n  toDOMRange(editor: ReactEditor, range: Range): DOMRange {\n    const { anchor, focus } = range\n    const isBackward = Range.isBackward(range)\n    const domAnchor = ReactEditor.toDOMPoint(editor, anchor)\n    const domFocus = Range.isCollapsed(range)\n      ? domAnchor\n      : ReactEditor.toDOMPoint(editor, focus)\n\n    const domRange = window.document.createRange()\n    const [startNode, startOffset] = isBackward ? domFocus : domAnchor\n    const [endNode, endOffset] = isBackward ? domAnchor : domFocus\n\n    // A slate Point at zero-width Leaf always has an offset of 0 but a native DOM selection at\n    // zero-width node has an offset of 1 so we have to check if we are in a zero-width node and\n    // adjust the offset accordingly.\n    const startEl = (isDOMElement(startNode)\n      ? startNode\n      : startNode.parentElement) as HTMLElement\n    const isStartAtZeroWidth = !!startEl.getAttribute('data-slate-zero-width')\n    const endEl = (isDOMElement(endNode)\n      ? endNode\n      : endNode.parentElement) as HTMLElement\n    const isEndAtZeroWidth = !!endEl.getAttribute('data-slate-zero-width')\n\n    domRange.setStart(startNode, isStartAtZeroWidth ? 1 : startOffset)\n    domRange.setEnd(endNode, isEndAtZeroWidth ? 1 : endOffset)\n    return domRange\n  },\n\n  /**\n   * Find a Slate node from a native DOM `element`.\n   */\n\n  toSlateNode(editor: ReactEditor, domNode: DOMNode): Node {\n    let domEl = isDOMElement(domNode) ? domNode : domNode.parentElement\n\n    if (domEl && !domEl.hasAttribute('data-slate-node')) {\n      domEl = domEl.closest(`[data-slate-node]`)\n    }\n\n    const node = domEl ? ELEMENT_TO_NODE.get(domEl as HTMLElement) : null\n\n    if (!node) {\n      throw new Error(`Cannot resolve a Slate node from DOM node: ${domEl}`)\n    }\n\n    return node\n  },\n\n  /**\n   * Get the target range from a DOM `event`.\n   */\n\n  findEventRange(editor: ReactEditor, event: any): Range {\n    if ('nativeEvent' in event) {\n      event = event.nativeEvent\n    }\n\n    const { clientX: x, clientY: y, target } = event\n\n    if (x == null || y == null) {\n      throw new Error(`Cannot resolve a Slate range from a DOM event: ${event}`)\n    }\n\n    const node = ReactEditor.toSlateNode(editor, event.target)\n    const path = ReactEditor.findPath(editor, node)\n\n    // If the drop target is inside a void node, move it into either the\n    // next or previous node, depending on which side the `x` and `y`\n    // coordinates are closest to.\n    if (Editor.isVoid(editor, node)) {\n      const rect = target.getBoundingClientRect()\n      const isPrev = editor.isInline(node)\n        ? x - rect.left < rect.left + rect.width - x\n        : y - rect.top < rect.top + rect.height - y\n\n      const edge = Editor.point(editor, path, {\n        edge: isPrev ? 'start' : 'end',\n      })\n      const point = isPrev\n        ? Editor.before(editor, edge)\n        : Editor.after(editor, edge)\n\n      if (point) {\n        const range = Editor.range(editor, point)\n        return range\n      }\n    }\n\n    // Else resolve a range from the caret position where the drop occured.\n    let domRange\n    const { document } = window\n\n    // COMPAT: In Firefox, `caretRangeFromPoint` doesn't exist. (2016/07/25)\n    if (document.caretRangeFromPoint) {\n      domRange = document.caretRangeFromPoint(x, y)\n    } else {\n      const position = document.caretPositionFromPoint(x, y)\n\n      if (position) {\n        domRange = document.createRange()\n        domRange.setStart(position.offsetNode, position.offset)\n        domRange.setEnd(position.offsetNode, position.offset)\n      }\n    }\n\n    if (!domRange) {\n      throw new Error(`Cannot resolve a Slate range from a DOM event: ${event}`)\n    }\n\n    // Resolve a Slate range from the DOM range.\n    const range = ReactEditor.toSlateRange(editor, domRange)\n    return range\n  },\n\n  /**\n   * Find a Slate point from a DOM selection's `domNode` and `domOffset`.\n   */\n\n  toSlatePoint(editor: ReactEditor, domPoint: DOMPoint): Point {\n    const [nearestNode, nearestOffset] = normalizeDOMPoint(domPoint)\n    const parentNode = nearestNode.parentNode as DOMElement\n    let textNode: DOMElement | null = null\n    let offset = 0\n\n    if (parentNode) {\n      const voidNode = parentNode.closest('[data-slate-void=\"true\"]')\n      let leafNode = parentNode.closest('[data-slate-leaf]')\n      let domNode: DOMElement | null = null\n\n      // Calculate how far into the text node the `nearestNode` is, so that we\n      // can determine what the offset relative to the text node is.\n      if (leafNode) {\n        textNode = leafNode.closest('[data-slate-node=\"text\"]')!\n        const range = window.document.createRange()\n        range.setStart(textNode, 0)\n        range.setEnd(nearestNode, nearestOffset)\n        const contents = range.cloneContents()\n        const removals = [\n          ...contents.querySelectorAll('[data-slate-zero-width]'),\n          ...contents.querySelectorAll('[contenteditable=false]'),\n        ]\n\n        removals.forEach(el => {\n          el!.parentNode!.removeChild(el)\n        })\n\n        // COMPAT: Edge has a bug where Range.prototype.toString() will\n        // convert \\n into \\r\\n. The bug causes a loop when slate-react\n        // attempts to reposition its cursor to match the native position. Use\n        // textContent.length instead.\n        // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10291116/\n        offset = contents.textContent!.length\n        domNode = textNode\n      } else if (voidNode) {\n        // For void nodes, the element with the offset key will be a cousin, not an\n        // ancestor, so find it by going down from the nearest void parent.\n\n        leafNode = voidNode.querySelector('[data-slate-leaf]')!\n        textNode = leafNode.closest('[data-slate-node=\"text\"]')!\n        domNode = leafNode\n        offset = domNode.textContent!.length\n      }\n\n      // COMPAT: If the parent node is a Slate zero-width space, editor is\n      // because the text node should have no characters. However, during IME\n      // composition the ASCII characters will be prepended to the zero-width\n      // space, so subtract 1 from the offset to account for the zero-width\n      // space character.\n      if (\n        domNode &&\n        offset === domNode.textContent!.length &&\n        parentNode.hasAttribute('data-slate-zero-width')\n      ) {\n        offset--\n      }\n    }\n\n    if (!textNode) {\n      throw new Error(\n        `Cannot resolve a Slate point from DOM point: ${domPoint}`\n      )\n    }\n\n    // COMPAT: If someone is clicking from one Slate editor into another,\n    // the select event fires twice, once for the old editor's `element`\n    // first, and then afterwards for the correct `element`. (2017/03/03)\n    const slateNode = ReactEditor.toSlateNode(editor, textNode!)\n    const path = ReactEditor.findPath(editor, slateNode)\n    return { path, offset }\n  },\n\n  /**\n   * Find a Slate range from a DOM range or selection.\n   */\n\n  toSlateRange(\n    editor: ReactEditor,\n    domRange: DOMRange | DOMStaticRange | DOMSelection\n  ): Range {\n    const el =\n      domRange instanceof Selection\n        ? domRange.anchorNode\n        : domRange.startContainer\n    let anchorNode\n    let anchorOffset\n    let focusNode\n    let focusOffset\n    let isCollapsed\n\n    if (el) {\n      if (domRange instanceof Selection) {\n        anchorNode = domRange.anchorNode\n        anchorOffset = domRange.anchorOffset\n        focusNode = domRange.focusNode\n        focusOffset = domRange.focusOffset\n        isCollapsed = domRange.isCollapsed\n      } else {\n        anchorNode = domRange.startContainer\n        anchorOffset = domRange.startOffset\n        focusNode = domRange.endContainer\n        focusOffset = domRange.endOffset\n        isCollapsed = domRange.collapsed\n      }\n    }\n\n    if (\n      anchorNode == null ||\n      focusNode == null ||\n      anchorOffset == null ||\n      focusOffset == null\n    ) {\n      throw new Error(\n        `Cannot resolve a Slate range from DOM range: ${domRange}`\n      )\n    }\n\n    const anchor = ReactEditor.toSlatePoint(editor, [anchorNode, anchorOffset])\n    const focus = isCollapsed\n      ? anchor\n      : ReactEditor.toSlatePoint(editor, [focusNode, focusOffset])\n\n    return { anchor, focus }\n  },\n}\n","import { createContext, useContext } from 'react'\n\n/**\n * A React context for sharing the `focused` state of the editor.\n */\n\nexport const FocusedContext = createContext(false)\n\n/**\n * Get the current `focused` state of the editor.\n */\n\nexport const useFocused = (): boolean => {\n  return useContext(FocusedContext)\n}\n","import { createContext, useContext } from 'react'\n\nimport { ReactEditor } from '../plugin/react-editor'\n\n/**\n * A React context for sharing the editor object.\n */\n\nexport const EditorContext = createContext<ReactEditor | null>(null)\n\n/**\n * Get the current editor object from the React context.\n */\n\nexport const useEditor = () => {\n  const editor = useContext(EditorContext)\n\n  if (!editor) {\n    throw new Error(\n      `The \\`useEditor\\` hook must be used inside the <Slate> component's context.`\n    )\n  }\n\n  return editor\n}\n","import { createContext, useContext } from 'react'\n\nimport { ReactEditor } from '../plugin/react-editor'\n\n/**\n * A React context for sharing the editor object, in a way that re-renders the\n * context whenever changes occur.\n */\n\nexport const SlateContext = createContext<[ReactEditor] | null>(null)\n\n/**\n * Get the current editor object from the React context.\n */\n\nexport const useSlate = () => {\n  const context = useContext(SlateContext)\n\n  if (!context) {\n    throw new Error(\n      `The \\`useSlate\\` hook must be used inside the <SlateProvider> component's context.`\n    )\n  }\n\n  const [editor] = context\n  return editor\n}\n","import React, { useMemo, useState, useCallback, useEffect } from 'react'\nimport { Node } from 'slate'\n\nimport { ReactEditor } from '../plugin/react-editor'\nimport { FocusedContext } from '../hooks/use-focused'\nimport { EditorContext } from '../hooks/use-editor'\nimport { SlateContext } from '../hooks/use-slate'\nimport { EDITOR_TO_ON_CHANGE } from '../utils/weak-maps'\n\n/**\n * A wrapper around the provider to handle `onChange` events, because the editor\n * is a mutable singleton so it won't ever register as \"changed\" otherwise.\n */\n\nexport const Slate = (props: {\n  editor: ReactEditor\n  value: Node[]\n  children: React.ReactNode\n  onChange: (value: Node[]) => void\n  [key: string]: unknown\n}) => {\n  const { editor, children, onChange, value, ...rest } = props\n  const [key, setKey] = useState(0)\n  const context: [ReactEditor] = useMemo(() => {\n    editor.children = value\n    Object.assign(editor, rest)\n    return [editor]\n  }, [key, value, ...Object.values(rest)])\n\n  const onContextChange = useCallback(() => {\n    onChange(editor.children)\n    setKey(key + 1)\n  }, [key, onChange])\n\n  EDITOR_TO_ON_CHANGE.set(editor, onContextChange)\n\n  useEffect(() => {\n    return () => {\n      EDITOR_TO_ON_CHANGE.set(editor, () => {})\n    }\n  }, [])\n\n  return (\n    <SlateContext.Provider value={context}>\n      <EditorContext.Provider value={editor}>\n        <FocusedContext.Provider value={ReactEditor.isFocused(editor)}>\n          {children}\n        </FocusedContext.Provider>\n      </EditorContext.Provider>\n    </SlateContext.Provider>\n  )\n}\n","import { createContext, useContext } from 'react'\n\n/**\n * A React context for sharing the `readOnly` state of the editor.\n */\n\nexport const ReadOnlyContext = createContext(false)\n\n/**\n * Get the current `readOnly` state of the editor.\n */\n\nexport const useReadOnly = (): boolean => {\n  return useContext(ReadOnlyContext)\n}\n","import { createContext, useContext } from 'react'\n\n/**\n * A React context for sharing the `selected` state of an element.\n */\n\nexport const SelectedContext = createContext(false)\n\n/**\n * Get the current `selected` state of an element.\n */\n\nexport const useSelected = (): boolean => {\n  return useContext(SelectedContext)\n}\n","import ReactDOM from 'react-dom'\nimport { Editor, Node, Path, Operation, Transforms, Range } from 'slate'\n\nimport { ReactEditor } from './react-editor'\nimport { Key } from '../utils/key'\nimport { EDITOR_TO_ON_CHANGE, NODE_TO_KEY } from '../utils/weak-maps'\nimport { isDOMText, getPlainText } from '../utils/dom'\n\n/**\n * `withReact` adds React and DOM specific behaviors to the editor.\n */\n\nexport const withReact = <T extends Editor>(editor: T) => {\n  const e = editor as T & ReactEditor\n  const { apply, onChange } = e\n\n  e.apply = (op: Operation) => {\n    const matches: [Path, Key][] = []\n\n    switch (op.type) {\n      case 'insert_text':\n      case 'remove_text':\n      case 'set_node': {\n        for (const [node, path] of Editor.levels(e, { at: op.path })) {\n          const key = ReactEditor.findKey(e, node)\n          matches.push([path, key])\n        }\n\n        break\n      }\n\n      case 'insert_node':\n      case 'remove_node':\n      case 'merge_node':\n      case 'split_node': {\n        for (const [node, path] of Editor.levels(e, {\n          at: Path.parent(op.path),\n        })) {\n          const key = ReactEditor.findKey(e, node)\n          matches.push([path, key])\n        }\n\n        break\n      }\n\n      case 'move_node': {\n        // TODO\n        break\n      }\n    }\n\n    apply(op)\n\n    for (const [path, key] of matches) {\n      const [node] = Editor.node(e, path)\n      NODE_TO_KEY.set(node, key)\n    }\n  }\n\n  e.setFragmentData = (data: DataTransfer) => {\n    const { selection } = e\n\n    if (!selection) {\n      return\n    }\n\n    const [start, end] = Range.edges(selection)\n    const startVoid = Editor.void(e, { at: start.path })\n    const endVoid = Editor.void(e, { at: end.path })\n\n    if (Range.isCollapsed(selection) && !startVoid) {\n      return\n    }\n\n    // Create a fake selection so that we can add a Base64-encoded copy of the\n    // fragment to the HTML, to decode on future pastes.\n    const domRange = ReactEditor.toDOMRange(e, selection)\n    let contents = domRange.cloneContents()\n    let attach = contents.childNodes[0] as HTMLElement\n\n    // Make sure attach is non-empty, since empty nodes will not get copied.\n    contents.childNodes.forEach(node => {\n      if (node.textContent && node.textContent.trim() !== '') {\n        attach = node as HTMLElement\n      }\n    })\n\n    // COMPAT: If the end node is a void node, we need to move the end of the\n    // range from the void node's spacer span, to the end of the void node's\n    // content, since the spacer is before void's content in the DOM.\n    if (endVoid) {\n      const [voidNode] = endVoid\n      const r = domRange.cloneRange()\n      const domNode = ReactEditor.toDOMNode(e, voidNode)\n      r.setEndAfter(domNode)\n      contents = r.cloneContents()\n    }\n\n    // COMPAT: If the start node is a void node, we need to attach the encoded\n    // fragment to the void node's content node instead of the spacer, because\n    // attaching it to empty `<div>/<span>` nodes will end up having it erased by\n    // most browsers. (2018/04/27)\n    if (startVoid) {\n      attach = contents.querySelector('[data-slate-spacer]')! as HTMLElement\n    }\n\n    // Remove any zero-width space spans from the cloned DOM so that they don't\n    // show up elsewhere when pasted.\n    Array.from(contents.querySelectorAll('[data-slate-zero-width]')).forEach(\n      zw => {\n        const isNewline = zw.getAttribute('data-slate-zero-width') === 'n'\n        zw.textContent = isNewline ? '\\n' : ''\n      }\n    )\n\n    // Set a `data-slate-fragment` attribute on a non-empty node, so it shows up\n    // in the HTML, and can be used for intra-Slate pasting. If it's a text\n    // node, wrap it in a `<span>` so we have something to set an attribute on.\n    if (isDOMText(attach)) {\n      const span = document.createElement('span')\n      // COMPAT: In Chrome and Safari, if we don't add the `white-space` style\n      // then leading and trailing spaces will be ignored. (2017/09/21)\n      span.style.whiteSpace = 'pre'\n      span.appendChild(attach)\n      contents.appendChild(span)\n      attach = span\n    }\n\n    const fragment = e.getFragment()\n    const string = JSON.stringify(fragment)\n    const encoded = window.btoa(encodeURIComponent(string))\n    attach.setAttribute('data-slate-fragment', encoded)\n    data.setData('application/x-slate-fragment', encoded)\n\n    // Add the content to a <div> so that we can get its inner HTML.\n    const div = document.createElement('div')\n    div.appendChild(contents)\n    div.setAttribute('hidden', 'true')\n    document.body.appendChild(div)\n    data.setData('text/html', div.innerHTML)\n    data.setData('text/plain', getPlainText(div))\n    document.body.removeChild(div)\n  }\n\n  e.insertData = (data: DataTransfer) => {\n    const fragment = data.getData('application/x-slate-fragment')\n\n    if (fragment) {\n      const decoded = decodeURIComponent(window.atob(fragment))\n      const parsed = JSON.parse(decoded) as Node[]\n      e.insertFragment(parsed)\n      return\n    }\n\n    const text = data.getData('text/plain')\n\n    if (text) {\n      const lines = text.split(/\\r\\n|\\r|\\n/)\n      let split = false\n\n      for (const line of lines) {\n        if (split) {\n          Transforms.splitNodes(e, { always: true })\n        }\n\n        e.insertText(line)\n        split = true\n      }\n    }\n  }\n\n  e.onChange = () => {\n    // COMPAT: React doesn't batch `setState` hook calls, which means that the\n    // children and selection can get out of sync for one render pass. So we\n    // have to use this unstable API to ensure it batches them. (2019/12/03)\n    // https://github.com/facebook/react/issues/14259#issuecomment-439702367\n    ReactDOM.unstable_batchedUpdates(() => {\n      const onContextChange = EDITOR_TO_ON_CHANGE.get(e)\n\n      if (onContextChange) {\n        onContextChange()\n      }\n\n      onChange()\n    })\n  }\n\n  return e\n}\n","import React from 'react'\nimport { Editor, Text, Path, Element, Node } from 'slate'\n\nimport { ReactEditor, useEditor } from '..'\n\n/**\n * Leaf content strings.\n */\n\nconst String = (props: {\n  isLast: boolean\n  leaf: Text\n  parent: Element\n  text: Text\n}) => {\n  const { isLast, leaf, parent, text } = props\n  const editor = useEditor()\n  const path = ReactEditor.findPath(editor, text)\n  const parentPath = Path.parent(path)\n\n  // COMPAT: Render text inside void nodes with a zero-width space.\n  // So the node can contain selection but the text is not visible.\n  if (editor.isVoid(parent)) {\n    return <ZeroWidthString length={Node.string(parent).length} />\n  }\n\n  // COMPAT: If this is the last text node in an empty block, render a zero-\n  // width space that will convert into a line break when copying and pasting\n  // to support expected plain text.\n  if (\n    leaf.text === '' &&\n    parent.children[parent.children.length - 1] === text &&\n    !editor.isInline(parent) &&\n    Editor.string(editor, parentPath) === ''\n  ) {\n    return <ZeroWidthString isLineBreak />\n  }\n\n  // COMPAT: If the text is empty, it's because it's on the edge of an inline\n  // node, so we render a zero-width space so that the selection can be\n  // inserted next to it still.\n  if (leaf.text === '') {\n    return <ZeroWidthString />\n  }\n\n  // COMPAT: Browsers will collapse trailing new lines at the end of blocks,\n  // so we need to add an extra trailing new lines to prevent that.\n  if (isLast && leaf.text.slice(-1) === '\\n') {\n    return <TextString isTrailing text={leaf.text} />\n  }\n\n  return <TextString text={leaf.text} />\n}\n\n/**\n * Leaf strings with text in them.\n */\n\nconst TextString = (props: { text: string; isTrailing?: boolean }) => {\n  const { text, isTrailing = false } = props\n  return (\n    <span data-slate-string>\n      {text}\n      {isTrailing ? '\\n' : null}\n    </span>\n  )\n}\n\n/**\n * Leaf strings without text, render as zero-width strings.\n */\n\nconst ZeroWidthString = (props: { length?: number; isLineBreak?: boolean }) => {\n  const { length = 0, isLineBreak = false } = props\n  return (\n    <span\n      data-slate-zero-width={isLineBreak ? 'n' : 'z'}\n      data-slate-length={length}\n    >\n      {'\\uFEFF'}\n      {isLineBreak ? <br /> : null}\n    </span>\n  )\n}\n\nexport default String\n","import React from 'react'\nimport { Text, Element } from 'slate'\n\nimport String from './string'\nimport { PLACEHOLDER_SYMBOL } from '../utils/weak-maps'\nimport { RenderLeafProps } from './editable'\n\n/**\n * Individual leaves in a text node with unique formatting.\n */\n\nconst Leaf = (props: {\n  isLast: boolean\n  leaf: Text\n  parent: Element\n  renderLeaf?: (props: RenderLeafProps) => JSX.Element\n  text: Text\n}) => {\n  const {\n    leaf,\n    isLast,\n    text,\n    parent,\n    renderLeaf = (props: RenderLeafProps) => <DefaultLeaf {...props} />,\n  } = props\n\n  let children = (\n    <String isLast={isLast} leaf={leaf} parent={parent} text={text} />\n  )\n\n  if (leaf[PLACEHOLDER_SYMBOL]) {\n    children = (\n      <React.Fragment>\n        <span\n          contentEditable={false}\n          style={{\n            pointerEvents: 'none',\n            display: 'inline-block',\n            width: '0',\n            maxWidth: '100%',\n            whiteSpace: 'nowrap',\n            opacity: '0.333',\n            userSelect: 'none',\n            fontStyle: 'normal',\n            fontWeight: 'normal',\n            textDecoration: 'none',\n          }}\n        >\n          {leaf.placeholder as React.ReactNode}\n        </span>\n        {children}\n      </React.Fragment>\n    )\n  }\n\n  // COMPAT: Having the `data-` attributes on these leaf elements ensures that\n  // in certain misbehaving browsers they aren't weirdly cloned/destroyed by\n  // contenteditable behaviors. (2019/05/08)\n  const attributes: {\n    'data-slate-leaf': true\n  } = {\n    'data-slate-leaf': true,\n  }\n\n  return renderLeaf({ attributes, children, leaf, text })\n}\n\nconst MemoizedLeaf = React.memo(Leaf, (prev, next) => {\n  return (\n    next.parent === prev.parent &&\n    next.isLast === prev.isLast &&\n    next.renderLeaf === prev.renderLeaf &&\n    next.text === prev.text &&\n    Text.matches(next.leaf, prev.leaf)\n  )\n})\n\n/**\n * The default custom leaf renderer.\n */\n\nexport const DefaultLeaf = (props: RenderLeafProps) => {\n  const { attributes, children } = props\n  return <span {...attributes}>{children}</span>\n}\n\nexport default MemoizedLeaf\n","import { useLayoutEffect, useEffect } from 'react'\n\n/**\n * Prevent warning on SSR by falling back to useEffect when window is not defined\n */\nexport const useIsomorphicLayoutEffect =\n  typeof window !== 'undefined' ? useLayoutEffect : useEffect\n","import React, { useRef } from 'react'\nimport { Range, Element, Text as SlateText } from 'slate'\n\nimport Leaf from './leaf'\nimport { ReactEditor, useEditor } from '..'\nimport { RenderLeafProps } from './editable'\nimport { useIsomorphicLayoutEffect } from '../hooks/use-isomorphic-layout-effect'\nimport {\n  KEY_TO_ELEMENT,\n  NODE_TO_ELEMENT,\n  ELEMENT_TO_NODE,\n} from '../utils/weak-maps'\n\n/**\n * Text.\n */\n\nconst Text = (props: {\n  decorations: Range[]\n  isLast: boolean\n  parent: Element\n  renderLeaf?: (props: RenderLeafProps) => JSX.Element\n  text: SlateText\n}) => {\n  const { decorations, isLast, parent, renderLeaf, text } = props\n  const editor = useEditor()\n  const ref = useRef<HTMLSpanElement>(null)\n  const leaves = SlateText.decorations(text, decorations)\n  const key = ReactEditor.findKey(editor, text)\n  const children = []\n\n  for (let i = 0; i < leaves.length; i++) {\n    const leaf = leaves[i]\n\n    children.push(\n      <Leaf\n        isLast={isLast && i === leaves.length - 1}\n        key={`${key.id}-${i}`}\n        leaf={leaf}\n        text={text}\n        parent={parent}\n        renderLeaf={renderLeaf}\n      />\n    )\n  }\n\n  // Update element-related weak maps with the DOM element ref.\n  useIsomorphicLayoutEffect(() => {\n    if (ref.current) {\n      KEY_TO_ELEMENT.set(key, ref.current)\n      NODE_TO_ELEMENT.set(text, ref.current)\n      ELEMENT_TO_NODE.set(ref.current, text)\n    } else {\n      KEY_TO_ELEMENT.delete(key)\n      NODE_TO_ELEMENT.delete(text)\n    }\n  })\n\n  return (\n    <span data-slate-node=\"text\" ref={ref}>\n      {children}\n    </span>\n  )\n}\n\nconst MemoizedText = React.memo(Text, (prev, next) => {\n  return (\n    next.parent === prev.parent &&\n    next.isLast === prev.isLast &&\n    next.renderLeaf === prev.renderLeaf &&\n    next.text === prev.text\n  )\n})\n\nexport default MemoizedText\n","import React, { useRef } from 'react'\nimport getDirection from 'direction'\nimport { Editor, Node, Range, NodeEntry, Element as SlateElement } from 'slate'\n\nimport Text from './text'\nimport Children from './children'\nimport { ReactEditor, useEditor, useReadOnly } from '..'\nimport { SelectedContext } from '../hooks/use-selected'\nimport { useIsomorphicLayoutEffect } from '../hooks/use-isomorphic-layout-effect'\nimport {\n  NODE_TO_ELEMENT,\n  ELEMENT_TO_NODE,\n  NODE_TO_PARENT,\n  NODE_TO_INDEX,\n  KEY_TO_ELEMENT,\n} from '../utils/weak-maps'\nimport { RenderElementProps, RenderLeafProps } from './editable'\n\n/**\n * Element.\n */\n\nconst Element = (props: {\n  decorate: (entry: NodeEntry) => Range[]\n  decorations: Range[]\n  element: SlateElement\n  renderElement?: (props: RenderElementProps) => JSX.Element\n  renderLeaf?: (props: RenderLeafProps) => JSX.Element\n  selection: Range | null\n}) => {\n  const {\n    decorate,\n    decorations,\n    element,\n    renderElement = (p: RenderElementProps) => <DefaultElement {...p} />,\n    renderLeaf,\n    selection,\n  } = props\n  const ref = useRef<HTMLElement>(null)\n  const editor = useEditor()\n  const readOnly = useReadOnly()\n  const isInline = editor.isInline(element)\n  const key = ReactEditor.findKey(editor, element)\n\n  let children: JSX.Element | null = (\n    <Children\n      decorate={decorate}\n      decorations={decorations}\n      node={element}\n      renderElement={renderElement}\n      renderLeaf={renderLeaf}\n      selection={selection}\n    />\n  )\n\n  // Attributes that the developer must mix into the element in their\n  // custom node renderer component.\n  const attributes: {\n    'data-slate-node': 'element'\n    'data-slate-void'?: true\n    'data-slate-inline'?: true\n    contentEditable?: false\n    dir?: 'rtl'\n    ref: any\n  } = {\n    'data-slate-node': 'element',\n    ref,\n  }\n\n  if (isInline) {\n    attributes['data-slate-inline'] = true\n  }\n\n  // If it's a block node with inline children, add the proper `dir` attribute\n  // for text direction.\n  if (!isInline && Editor.hasInlines(editor, element)) {\n    const text = Node.string(element)\n    const dir = getDirection(text)\n\n    if (dir === 'rtl') {\n      attributes.dir = dir\n    }\n  }\n\n  // If it's a void node, wrap the children in extra void-specific elements.\n  if (Editor.isVoid(editor, element)) {\n    attributes['data-slate-void'] = true\n\n    if (!readOnly && isInline) {\n      attributes.contentEditable = false\n    }\n\n    const Tag = isInline ? 'span' : 'div'\n    const [[text]] = Node.texts(element)\n\n    children = readOnly ? null : (\n      <Tag\n        data-slate-spacer\n        style={{\n          height: '0',\n          color: 'transparent',\n          outline: 'none',\n          position: 'absolute',\n        }}\n      >\n        <Text decorations={[]} isLast={false} parent={element} text={text} />\n      </Tag>\n    )\n\n    NODE_TO_INDEX.set(text, 0)\n    NODE_TO_PARENT.set(text, element)\n  }\n\n  // Update element-related weak maps with the DOM element ref.\n  useIsomorphicLayoutEffect(() => {\n    if (ref.current) {\n      KEY_TO_ELEMENT.set(key, ref.current)\n      NODE_TO_ELEMENT.set(element, ref.current)\n      ELEMENT_TO_NODE.set(ref.current, element)\n    } else {\n      KEY_TO_ELEMENT.delete(key)\n      NODE_TO_ELEMENT.delete(element)\n    }\n  })\n\n  return (\n    <SelectedContext.Provider value={!!selection}>\n      {renderElement({ attributes, children, element })}\n    </SelectedContext.Provider>\n  )\n}\n\nconst MemoizedElement = React.memo(Element, (prev, next) => {\n  return (\n    prev.decorate === next.decorate &&\n    prev.element === next.element &&\n    prev.renderElement === next.renderElement &&\n    prev.renderLeaf === next.renderLeaf &&\n    isRangeListEqual(prev.decorations, next.decorations) &&\n    (prev.selection === next.selection ||\n      (!!prev.selection &&\n        !!next.selection &&\n        Range.equals(prev.selection, next.selection)))\n  )\n})\n\n/**\n * The default element renderer.\n */\n\nexport const DefaultElement = (props: RenderElementProps) => {\n  const { attributes, children, element } = props\n  const editor = useEditor()\n  const Tag = editor.isInline(element) ? 'span' : 'div'\n  return (\n    <Tag {...attributes} style={{ position: 'relative' }}>\n      {children}\n    </Tag>\n  )\n}\n\n/**\n * Check if a list of ranges is equal to another.\n *\n * PERF: this requires the two lists to also have the ranges inside them in the\n * same order, but this is an okay constraint for us since decorations are\n * kept in order, and the odd case where they aren't is okay to re-render for.\n */\n\nconst isRangeListEqual = (list: Range[], another: Range[]): boolean => {\n  if (list.length !== another.length) {\n    return false\n  }\n\n  for (let i = 0; i < list.length; i++) {\n    const range = list[i]\n    const other = another[i]\n\n    if (!Range.equals(range, other)) {\n      return false\n    }\n  }\n\n  return true\n}\n\nexport default MemoizedElement\n","import React from 'react'\nimport { Editor, Range, Element, NodeEntry, Ancestor, Descendant } from 'slate'\n\nimport ElementComponent from './element'\nimport TextComponent from './text'\nimport { ReactEditor } from '..'\nimport { useEditor } from '../hooks/use-editor'\nimport { NODE_TO_INDEX, NODE_TO_PARENT } from '../utils/weak-maps'\nimport { RenderElementProps, RenderLeafProps } from './editable'\n\n/**\n * Children.\n */\n\nconst Children = (props: {\n  decorate: (entry: NodeEntry) => Range[]\n  decorations: Range[]\n  node: Ancestor\n  renderElement?: (props: RenderElementProps) => JSX.Element\n  renderLeaf?: (props: RenderLeafProps) => JSX.Element\n  selection: Range | null\n}) => {\n  const {\n    decorate,\n    decorations,\n    node,\n    renderElement,\n    renderLeaf,\n    selection,\n  } = props\n  const editor = useEditor()\n  const path = ReactEditor.findPath(editor, node)\n  const children = []\n  const isLeafBlock =\n    Element.isElement(node) &&\n    !editor.isInline(node) &&\n    Editor.hasInlines(editor, node)\n\n  for (let i = 0; i < node.children.length; i++) {\n    const p = path.concat(i)\n    const n = node.children[i] as Descendant\n    const key = ReactEditor.findKey(editor, n)\n    const range = Editor.range(editor, p)\n    const sel = selection && Range.intersection(range, selection)\n    const ds = decorate([n, p])\n\n    for (const dec of decorations) {\n      const d = Range.intersection(dec, range)\n\n      if (d) {\n        ds.push(d)\n      }\n    }\n\n    if (Element.isElement(n)) {\n      children.push(\n        <ElementComponent\n          decorate={decorate}\n          decorations={ds}\n          element={n}\n          key={key.id}\n          renderElement={renderElement}\n          renderLeaf={renderLeaf}\n          selection={sel}\n        />\n      )\n    } else {\n      children.push(\n        <TextComponent\n          decorations={ds}\n          key={key.id}\n          isLast={isLeafBlock && i === node.children.length - 1}\n          parent={node}\n          renderLeaf={renderLeaf}\n          text={n}\n        />\n      )\n    }\n\n    NODE_TO_INDEX.set(n, i)\n    NODE_TO_PARENT.set(n, node)\n  }\n\n  return <React.Fragment>{children}</React.Fragment>\n}\n\nexport default Children\n","export const IS_IOS =\n  typeof navigator !== 'undefined' &&\n  typeof window !== 'undefined' &&\n  /iPad|iPhone|iPod/.test(navigator.userAgent) &&\n  !window.MSStream\n\nexport const IS_APPLE =\n  typeof navigator !== 'undefined' && /Mac OS X/.test(navigator.userAgent)\n\nexport const IS_FIREFOX =\n  typeof navigator !== 'undefined' &&\n  /^(?!.*Seamonkey)(?=.*Firefox).*/i.test(navigator.userAgent)\n\nexport const IS_SAFARI =\n  typeof navigator !== 'undefined' &&\n  /Version\\/[\\d\\.]+.*Safari/.test(navigator.userAgent)\n\n// \"modern\" Edge was released at 79.x\nexport const IS_EDGE_LEGACY =\n  typeof navigator !== 'undefined' &&\n  /Edge?\\/(?:[0-6][0-9]|[0-7][0-8])/i.test(navigator.userAgent)\n\n// Native beforeInput events don't work well with react on Chrome 75 and older, Chrome 76+ can use beforeInput\nexport const IS_CHROME_LEGACY =\n  typeof navigator !== 'undefined' &&\n  /Chrome?\\/(?:[0-7][0-5]|[0-6][0-9])/i.test(navigator.userAgent)\n","import { isKeyHotkey } from 'is-hotkey'\nimport { IS_APPLE } from './environment'\n\n/**\n * Hotkey mappings for each platform.\n */\n\nconst HOTKEYS = {\n  bold: 'mod+b',\n  compose: ['down', 'left', 'right', 'up', 'backspace', 'enter'],\n  moveBackward: 'left',\n  moveForward: 'right',\n  moveWordBackward: 'ctrl+left',\n  moveWordForward: 'ctrl+right',\n  deleteBackward: 'shift?+backspace',\n  deleteForward: 'shift?+delete',\n  extendBackward: 'shift+left',\n  extendForward: 'shift+right',\n  italic: 'mod+i',\n  splitBlock: 'shift?+enter',\n  undo: 'mod+z',\n}\n\nconst APPLE_HOTKEYS = {\n  moveLineBackward: 'opt+up',\n  moveLineForward: 'opt+down',\n  moveWordBackward: 'opt+left',\n  moveWordForward: 'opt+right',\n  deleteBackward: ['ctrl+backspace', 'ctrl+h'],\n  deleteForward: ['ctrl+delete', 'ctrl+d'],\n  deleteLineBackward: 'cmd+shift?+backspace',\n  deleteLineForward: ['cmd+shift?+delete', 'ctrl+k'],\n  deleteWordBackward: 'opt+shift?+backspace',\n  deleteWordForward: 'opt+shift?+delete',\n  extendLineBackward: 'opt+shift+up',\n  extendLineForward: 'opt+shift+down',\n  redo: 'cmd+shift+z',\n  transposeCharacter: 'ctrl+t',\n}\n\nconst WINDOWS_HOTKEYS = {\n  deleteWordBackward: 'ctrl+shift?+backspace',\n  deleteWordForward: 'ctrl+shift?+delete',\n  redo: ['ctrl+y', 'ctrl+shift+z'],\n}\n\n/**\n * Create a platform-aware hotkey checker.\n */\n\nconst create = (key: string) => {\n  const generic = HOTKEYS[key]\n  const apple = APPLE_HOTKEYS[key]\n  const windows = WINDOWS_HOTKEYS[key]\n  const isGeneric = generic && isKeyHotkey(generic)\n  const isApple = apple && isKeyHotkey(apple)\n  const isWindows = windows && isKeyHotkey(windows)\n\n  return (event: KeyboardEvent) => {\n    if (isGeneric && isGeneric(event)) return true\n    if (IS_APPLE && isApple && isApple(event)) return true\n    if (!IS_APPLE && isWindows && isWindows(event)) return true\n    return false\n  }\n}\n\n/**\n * Hotkeys.\n */\n\nexport default {\n  isBold: create('bold'),\n  isCompose: create('compose'),\n  isMoveBackward: create('moveBackward'),\n  isMoveForward: create('moveForward'),\n  isDeleteBackward: create('deleteBackward'),\n  isDeleteForward: create('deleteForward'),\n  isDeleteLineBackward: create('deleteLineBackward'),\n  isDeleteLineForward: create('deleteLineForward'),\n  isDeleteWordBackward: create('deleteWordBackward'),\n  isDeleteWordForward: create('deleteWordForward'),\n  isExtendBackward: create('extendBackward'),\n  isExtendForward: create('extendForward'),\n  isExtendLineBackward: create('extendLineBackward'),\n  isExtendLineForward: create('extendLineForward'),\n  isItalic: create('italic'),\n  isMoveLineBackward: create('moveLineBackward'),\n  isMoveLineForward: create('moveLineForward'),\n  isMoveWordBackward: create('moveWordBackward'),\n  isMoveWordForward: create('moveWordForward'),\n  isRedo: create('redo'),\n  isSplitBlock: create('splitBlock'),\n  isTransposeCharacter: create('transposeCharacter'),\n  isUndo: create('undo'),\n}\n","import React, { useEffect, useRef, useMemo, useCallback } from 'react'\nimport {\n  Editor,\n  Element,\n  NodeEntry,\n  Node,\n  Range,\n  Text,\n  Transforms,\n  Path,\n} from 'slate'\nimport throttle from 'lodash/throttle'\nimport scrollIntoView from 'scroll-into-view-if-needed'\n\nimport Children from './children'\nimport Hotkeys from '../utils/hotkeys'\nimport {\n  IS_FIREFOX,\n  IS_SAFARI,\n  IS_EDGE_LEGACY,\n  IS_CHROME_LEGACY,\n} from '../utils/environment'\nimport { ReactEditor } from '..'\nimport { ReadOnlyContext } from '../hooks/use-read-only'\nimport { useSlate } from '../hooks/use-slate'\nimport { useIsomorphicLayoutEffect } from '../hooks/use-isomorphic-layout-effect'\nimport {\n  DOMElement,\n  DOMNode,\n  DOMRange,\n  isDOMElement,\n  isDOMNode,\n  isDOMText,\n  DOMStaticRange,\n  isPlainTextOnlyPaste,\n} from '../utils/dom'\nimport {\n  EDITOR_TO_ELEMENT,\n  ELEMENT_TO_NODE,\n  IS_READ_ONLY,\n  NODE_TO_ELEMENT,\n  IS_FOCUSED,\n  PLACEHOLDER_SYMBOL,\n} from '../utils/weak-maps'\n\n// COMPAT: Firefox/Edge Legacy don't support the `beforeinput` event\n// Chrome Legacy doesn't support `beforeinput` correctly\nconst HAS_BEFORE_INPUT_SUPPORT = !(\n  IS_FIREFOX ||\n  IS_EDGE_LEGACY ||\n  IS_CHROME_LEGACY\n)\n\n/**\n * `RenderElementProps` are passed to the `renderElement` handler.\n */\n\nexport interface RenderElementProps {\n  children: any\n  element: Element\n  attributes: {\n    'data-slate-node': 'element'\n    'data-slate-inline'?: true\n    'data-slate-void'?: true\n    dir?: 'rtl'\n    ref: any\n  }\n}\n\n/**\n * `RenderLeafProps` are passed to the `renderLeaf` handler.\n */\n\nexport interface RenderLeafProps {\n  children: any\n  leaf: Text\n  text: Text\n  attributes: {\n    'data-slate-leaf': true\n  }\n}\n\n/**\n * `EditableProps` are passed to the `<Editable>` component.\n */\n\nexport type EditableProps = {\n  decorate?: (entry: NodeEntry) => Range[]\n  onDOMBeforeInput?: (event: Event) => void\n  placeholder?: string\n  readOnly?: boolean\n  role?: string\n  style?: React.CSSProperties\n  renderElement?: (props: RenderElementProps) => JSX.Element\n  renderLeaf?: (props: RenderLeafProps) => JSX.Element\n  as?: React.ElementType\n} & React.TextareaHTMLAttributes<HTMLDivElement>\n\n/**\n * Editable.\n */\n\nexport const Editable = (props: EditableProps) => {\n  const {\n    autoFocus,\n    decorate = defaultDecorate,\n    onDOMBeforeInput: propsOnDOMBeforeInput,\n    placeholder,\n    readOnly = false,\n    renderElement,\n    renderLeaf,\n    style = {},\n    as: Component = 'div',\n    ...attributes\n  } = props\n  const editor = useSlate()\n  const ref = useRef<HTMLDivElement>(null)\n\n  // Update internal state on each render.\n  IS_READ_ONLY.set(editor, readOnly)\n\n  // Keep track of some state for the event handler logic.\n  const state = useMemo(\n    () => ({\n      isComposing: false,\n      isUpdatingSelection: false,\n      latestElement: null as DOMElement | null,\n    }),\n    []\n  )\n\n  // Update element-related weak maps with the DOM element ref.\n  useIsomorphicLayoutEffect(() => {\n    if (ref.current) {\n      EDITOR_TO_ELEMENT.set(editor, ref.current)\n      NODE_TO_ELEMENT.set(editor, ref.current)\n      ELEMENT_TO_NODE.set(ref.current, editor)\n    } else {\n      NODE_TO_ELEMENT.delete(editor)\n    }\n  })\n\n  // Whenever the editor updates, make sure the DOM selection state is in sync.\n  useIsomorphicLayoutEffect(() => {\n    const { selection } = editor\n    const domSelection = window.getSelection()\n\n    if (state.isComposing || !domSelection || !ReactEditor.isFocused(editor)) {\n      return\n    }\n\n    const hasDomSelection = domSelection.type !== 'None'\n\n    // If the DOM selection is properly unset, we're done.\n    if (!selection && !hasDomSelection) {\n      return\n    }\n\n    // verify that the dom selection is in the editor\n    const editorElement = EDITOR_TO_ELEMENT.get(editor)!\n    let hasDomSelectionInEditor = false\n    if (\n      editorElement.contains(domSelection.anchorNode) &&\n      editorElement.contains(domSelection.focusNode)\n    ) {\n      hasDomSelectionInEditor = true\n    }\n\n    // If the DOM selection is in the editor and the editor selection is already correct, we're done.\n    if (\n      hasDomSelection &&\n      hasDomSelectionInEditor &&\n      selection &&\n      Range.equals(ReactEditor.toSlateRange(editor, domSelection), selection)\n    ) {\n      return\n    }\n\n    // Otherwise the DOM selection is out of sync, so update it.\n    const el = ReactEditor.toDOMNode(editor, editor)\n    state.isUpdatingSelection = true\n\n    const newDomRange = selection && ReactEditor.toDOMRange(editor, selection)\n\n    if (newDomRange) {\n      if (Range.isBackward(selection!)) {\n        domSelection.setBaseAndExtent(\n          newDomRange.endContainer,\n          newDomRange.endOffset,\n          newDomRange.startContainer,\n          newDomRange.startOffset\n        )\n      } else {\n        domSelection.setBaseAndExtent(\n          newDomRange.startContainer,\n          newDomRange.startOffset,\n          newDomRange.endContainer,\n          newDomRange.endOffset\n        )\n      }\n      const leafEl = newDomRange.startContainer.parentElement!\n      scrollIntoView(leafEl, {\n        scrollMode: 'if-needed',\n        boundary: el,\n      })\n    } else {\n      domSelection.removeAllRanges()\n    }\n\n    setTimeout(() => {\n      // COMPAT: In Firefox, it's not enough to create a range, you also need\n      // to focus the contenteditable element too. (2016/11/16)\n      if (newDomRange && IS_FIREFOX) {\n        el.focus()\n      }\n\n      state.isUpdatingSelection = false\n    })\n  })\n\n  // The autoFocus TextareaHTMLAttribute doesn't do anything on a div, so it\n  // needs to be manually focused.\n  useEffect(() => {\n    if (ref.current && autoFocus) {\n      ref.current.focus()\n    }\n  }, [autoFocus])\n\n  // Listen on the native `beforeinput` event to get real \"Level 2\" events. This\n  // is required because React's `beforeinput` is fake and never really attaches\n  // to the real event sadly. (2019/11/01)\n  // https://github.com/facebook/react/issues/11211\n  const onDOMBeforeInput = useCallback(\n    (\n      event: Event & {\n        data: string | null\n        dataTransfer: DataTransfer | null\n        getTargetRanges(): DOMStaticRange[]\n        inputType: string\n        isComposing: boolean\n      }\n    ) => {\n      if (\n        !readOnly &&\n        hasEditableTarget(editor, event.target) &&\n        !isDOMEventHandled(event, propsOnDOMBeforeInput)\n      ) {\n        const { selection } = editor\n        const { inputType: type } = event\n        const data = event.dataTransfer || event.data || undefined\n\n        // These two types occur while a user is composing text and can't be\n        // cancelled. Let them through and wait for the composition to end.\n        if (\n          type === 'insertCompositionText' ||\n          type === 'deleteCompositionText'\n        ) {\n          return\n        }\n\n        event.preventDefault()\n\n        // COMPAT: For the deleting forward/backward input types we don't want\n        // to change the selection because it is the range that will be deleted,\n        // and those commands determine that for themselves.\n        if (!type.startsWith('delete') || type.startsWith('deleteBy')) {\n          const [targetRange] = event.getTargetRanges()\n\n          if (targetRange) {\n            const range = ReactEditor.toSlateRange(editor, targetRange)\n\n            if (!selection || !Range.equals(selection, range)) {\n              Transforms.select(editor, range)\n            }\n          }\n        }\n\n        // COMPAT: If the selection is expanded, even if the command seems like\n        // a delete forward/backward command it should delete the selection.\n        if (\n          selection &&\n          Range.isExpanded(selection) &&\n          type.startsWith('delete')\n        ) {\n          Editor.deleteFragment(editor)\n          return\n        }\n\n        switch (type) {\n          case 'deleteByComposition':\n          case 'deleteByCut':\n          case 'deleteByDrag': {\n            Editor.deleteFragment(editor)\n            break\n          }\n\n          case 'deleteContent':\n          case 'deleteContentForward': {\n            Editor.deleteForward(editor)\n            break\n          }\n\n          case 'deleteContentBackward': {\n            Editor.deleteBackward(editor)\n            break\n          }\n\n          case 'deleteEntireSoftLine': {\n            Editor.deleteBackward(editor, { unit: 'line' })\n            Editor.deleteForward(editor, { unit: 'line' })\n            break\n          }\n\n          case 'deleteHardLineBackward': {\n            Editor.deleteBackward(editor, { unit: 'block' })\n            break\n          }\n\n          case 'deleteSoftLineBackward': {\n            Editor.deleteBackward(editor, { unit: 'line' })\n            break\n          }\n\n          case 'deleteHardLineForward': {\n            Editor.deleteForward(editor, { unit: 'block' })\n            break\n          }\n\n          case 'deleteSoftLineForward': {\n            Editor.deleteForward(editor, { unit: 'line' })\n            break\n          }\n\n          case 'deleteWordBackward': {\n            Editor.deleteBackward(editor, { unit: 'word' })\n            break\n          }\n\n          case 'deleteWordForward': {\n            Editor.deleteForward(editor, { unit: 'word' })\n            break\n          }\n\n          case 'insertLineBreak':\n          case 'insertParagraph': {\n            Editor.insertBreak(editor)\n            break\n          }\n\n          case 'insertFromComposition':\n          case 'insertFromDrop':\n          case 'insertFromPaste':\n          case 'insertFromYank':\n          case 'insertReplacementText':\n          case 'insertText': {\n            if (data instanceof DataTransfer) {\n              ReactEditor.insertData(editor, data)\n            } else if (typeof data === 'string') {\n              Editor.insertText(editor, data)\n            }\n\n            break\n          }\n        }\n      }\n    },\n    [readOnly, propsOnDOMBeforeInput]\n  )\n\n  // Attach a native DOM event handler for `beforeinput` events, because React's\n  // built-in `onBeforeInput` is actually a leaky polyfill that doesn't expose\n  // real `beforeinput` events sadly... (2019/11/04)\n  // https://github.com/facebook/react/issues/11211\n  useIsomorphicLayoutEffect(() => {\n    if (ref.current && HAS_BEFORE_INPUT_SUPPORT) {\n      // @ts-ignore The `beforeinput` event isn't recognized.\n      ref.current.addEventListener('beforeinput', onDOMBeforeInput)\n    }\n\n    return () => {\n      if (ref.current && HAS_BEFORE_INPUT_SUPPORT) {\n        // @ts-ignore The `beforeinput` event isn't recognized.\n        ref.current.removeEventListener('beforeinput', onDOMBeforeInput)\n      }\n    }\n  }, [onDOMBeforeInput])\n\n  // Listen on the native `selectionchange` event to be able to update any time\n  // the selection changes. This is required because React's `onSelect` is leaky\n  // and non-standard so it doesn't fire until after a selection has been\n  // released. This causes issues in situations where another change happens\n  // while a selection is being dragged.\n  const onDOMSelectionChange = useCallback(\n    throttle(() => {\n      if (!readOnly && !state.isComposing && !state.isUpdatingSelection) {\n        const { activeElement } = window.document\n        const el = ReactEditor.toDOMNode(editor, editor)\n        const domSelection = window.getSelection()\n\n        if (activeElement === el) {\n          state.latestElement = activeElement\n          IS_FOCUSED.set(editor, true)\n        } else {\n          IS_FOCUSED.delete(editor)\n        }\n\n        if (!domSelection) {\n          return Transforms.deselect(editor)\n        }\n\n        const { anchorNode, focusNode } = domSelection\n\n        const anchorNodeSelectable =\n          hasEditableTarget(editor, anchorNode) ||\n          isTargetInsideVoid(editor, anchorNode)\n\n        const focusNodeSelectable =\n          hasEditableTarget(editor, focusNode) ||\n          isTargetInsideVoid(editor, focusNode)\n\n        if (anchorNodeSelectable && focusNodeSelectable) {\n          const range = ReactEditor.toSlateRange(editor, domSelection)\n          Transforms.select(editor, range)\n        } else {\n          Transforms.deselect(editor)\n        }\n      }\n    }, 100),\n    [readOnly]\n  )\n\n  // Attach a native DOM event handler for `selectionchange`, because React's\n  // built-in `onSelect` handler doesn't fire for all selection changes. It's a\n  // leaky polyfill that only fires on keypresses or clicks. Instead, we want to\n  // fire for any change to the selection inside the editor. (2019/11/04)\n  // https://github.com/facebook/react/issues/5785\n  useIsomorphicLayoutEffect(() => {\n    window.document.addEventListener('selectionchange', onDOMSelectionChange)\n\n    return () => {\n      window.document.removeEventListener(\n        'selectionchange',\n        onDOMSelectionChange\n      )\n    }\n  }, [onDOMSelectionChange])\n\n  const decorations = decorate([editor, []])\n\n  if (\n    placeholder &&\n    editor.children.length === 1 &&\n    Array.from(Node.texts(editor)).length === 1 &&\n    Node.string(editor) === ''\n  ) {\n    const start = Editor.start(editor, [])\n    decorations.push({\n      [PLACEHOLDER_SYMBOL]: true,\n      placeholder,\n      anchor: start,\n      focus: start,\n    })\n  }\n\n  return (\n    <ReadOnlyContext.Provider value={readOnly}>\n      <Component\n        // COMPAT: The Grammarly Chrome extension works by changing the DOM\n        // out from under `contenteditable` elements, which leads to weird\n        // behaviors so we have to disable it like editor. (2017/04/24)\n        data-gramm={false}\n        role={readOnly ? undefined : 'textbox'}\n        {...attributes}\n        // COMPAT: Certain browsers don't support the `beforeinput` event, so we'd\n        // have to use hacks to make these replacement-based features work.\n        spellCheck={\n          !HAS_BEFORE_INPUT_SUPPORT ? undefined : attributes.spellCheck\n        }\n        autoCorrect={\n          !HAS_BEFORE_INPUT_SUPPORT ? undefined : attributes.autoCorrect\n        }\n        autoCapitalize={\n          !HAS_BEFORE_INPUT_SUPPORT ? undefined : attributes.autoCapitalize\n        }\n        data-slate-editor\n        data-slate-node=\"value\"\n        contentEditable={readOnly ? undefined : true}\n        suppressContentEditableWarning\n        ref={ref}\n        style={{\n          // Prevent the default outline styles.\n          outline: 'none',\n          // Preserve adjacent whitespace and new lines.\n          whiteSpace: 'pre-wrap',\n          // Allow words to break if they are too long.\n          wordWrap: 'break-word',\n          // Allow for passed-in styles to override anything.\n          ...style,\n        }}\n        onBeforeInput={useCallback(\n          (event: React.FormEvent<HTMLDivElement>) => {\n            // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n            // fall back to React's leaky polyfill instead just for it. It\n            // only works for the `insertText` input type.\n            if (\n              !HAS_BEFORE_INPUT_SUPPORT &&\n              !readOnly &&\n              !isEventHandled(event, attributes.onBeforeInput) &&\n              hasEditableTarget(editor, event.target)\n            ) {\n              event.preventDefault()\n              const text = (event as any).data as string\n              Editor.insertText(editor, text)\n            }\n          },\n          [readOnly]\n        )}\n        onBlur={useCallback(\n          (event: React.FocusEvent<HTMLDivElement>) => {\n            if (\n              readOnly ||\n              state.isUpdatingSelection ||\n              !hasEditableTarget(editor, event.target) ||\n              isEventHandled(event, attributes.onBlur)\n            ) {\n              return\n            }\n\n            // COMPAT: If the current `activeElement` is still the previous\n            // one, this is due to the window being blurred when the tab\n            // itself becomes unfocused, so we want to abort early to allow to\n            // editor to stay focused when the tab becomes focused again.\n            if (state.latestElement === window.document.activeElement) {\n              return\n            }\n\n            const { relatedTarget } = event\n            const el = ReactEditor.toDOMNode(editor, editor)\n\n            // COMPAT: The event should be ignored if the focus is returning\n            // to the editor from an embedded editable element (eg. an <input>\n            // element inside a void node).\n            if (relatedTarget === el) {\n              return\n            }\n\n            // COMPAT: The event should be ignored if the focus is moving from\n            // the editor to inside a void node's spacer element.\n            if (\n              isDOMElement(relatedTarget) &&\n              relatedTarget.hasAttribute('data-slate-spacer')\n            ) {\n              return\n            }\n\n            // COMPAT: The event should be ignored if the focus is moving to a\n            // non- editable section of an element that isn't a void node (eg.\n            // a list item of the check list example).\n            if (\n              relatedTarget != null &&\n              isDOMNode(relatedTarget) &&\n              ReactEditor.hasDOMNode(editor, relatedTarget)\n            ) {\n              const node = ReactEditor.toSlateNode(editor, relatedTarget)\n\n              if (Element.isElement(node) && !editor.isVoid(node)) {\n                return\n              }\n            }\n\n            IS_FOCUSED.delete(editor)\n          },\n          [readOnly, attributes.onBlur]\n        )}\n        onClick={useCallback(\n          (event: React.MouseEvent<HTMLDivElement>) => {\n            if (\n              !readOnly &&\n              hasTarget(editor, event.target) &&\n              !isEventHandled(event, attributes.onClick) &&\n              isDOMNode(event.target)\n            ) {\n              const node = ReactEditor.toSlateNode(editor, event.target)\n              const path = ReactEditor.findPath(editor, node)\n              const start = Editor.start(editor, path)\n              const end = Editor.end(editor, path)\n\n              const startVoid = Editor.void(editor, { at: start })\n              const endVoid = Editor.void(editor, { at: end })\n\n              if (\n                startVoid &&\n                endVoid &&\n                Path.equals(startVoid[1], endVoid[1])\n              ) {\n                const range = Editor.range(editor, start)\n                Transforms.select(editor, range)\n              }\n            }\n          },\n          [readOnly, attributes.onClick]\n        )}\n        onCompositionEnd={useCallback(\n          (event: React.CompositionEvent<HTMLDivElement>) => {\n            if (\n              hasEditableTarget(editor, event.target) &&\n              !isEventHandled(event, attributes.onCompositionEnd)\n            ) {\n              state.isComposing = false\n\n              // COMPAT: In Chrome, `beforeinput` events for compositions\n              // aren't correct and never fire the \"insertFromComposition\"\n              // type that we need. So instead, insert whenever a composition\n              // ends since it will already have been committed to the DOM.\n              if (!IS_SAFARI && !IS_FIREFOX && event.data) {\n                Editor.insertText(editor, event.data)\n              }\n            }\n          },\n          [attributes.onCompositionEnd]\n        )}\n        onCompositionStart={useCallback(\n          (event: React.CompositionEvent<HTMLDivElement>) => {\n            if (\n              hasEditableTarget(editor, event.target) &&\n              !isEventHandled(event, attributes.onCompositionStart)\n            ) {\n              state.isComposing = true\n            }\n          },\n          [attributes.onCompositionStart]\n        )}\n        onCopy={useCallback(\n          (event: React.ClipboardEvent<HTMLDivElement>) => {\n            if (\n              hasEditableTarget(editor, event.target) &&\n              !isEventHandled(event, attributes.onCopy)\n            ) {\n              event.preventDefault()\n              ReactEditor.setFragmentData(editor, event.clipboardData)\n            }\n          },\n          [attributes.onCopy]\n        )}\n        onCut={useCallback(\n          (event: React.ClipboardEvent<HTMLDivElement>) => {\n            if (\n              !readOnly &&\n              hasEditableTarget(editor, event.target) &&\n              !isEventHandled(event, attributes.onCut)\n            ) {\n              event.preventDefault()\n              ReactEditor.setFragmentData(editor, event.clipboardData)\n              const { selection } = editor\n\n              if (selection && Range.isExpanded(selection)) {\n                Editor.deleteFragment(editor)\n              }\n            }\n          },\n          [readOnly, attributes.onCut]\n        )}\n        onDragOver={useCallback(\n          (event: React.DragEvent<HTMLDivElement>) => {\n            if (\n              hasTarget(editor, event.target) &&\n              !isEventHandled(event, attributes.onDragOver)\n            ) {\n              // Only when the target is void, call `preventDefault` to signal\n              // that drops are allowed. Editable content is droppable by\n              // default, and calling `preventDefault` hides the cursor.\n              const node = ReactEditor.toSlateNode(editor, event.target)\n\n              if (Editor.isVoid(editor, node)) {\n                event.preventDefault()\n              }\n            }\n          },\n          [attributes.onDragOver]\n        )}\n        onDragStart={useCallback(\n          (event: React.DragEvent<HTMLDivElement>) => {\n            if (\n              hasTarget(editor, event.target) &&\n              !isEventHandled(event, attributes.onDragStart)\n            ) {\n              const node = ReactEditor.toSlateNode(editor, event.target)\n              const path = ReactEditor.findPath(editor, node)\n              const voidMatch = Editor.void(editor, { at: path })\n\n              // If starting a drag on a void node, make sure it is selected\n              // so that it shows up in the selection's fragment.\n              if (voidMatch) {\n                const range = Editor.range(editor, path)\n                Transforms.select(editor, range)\n              }\n\n              ReactEditor.setFragmentData(editor, event.dataTransfer)\n            }\n          },\n          [attributes.onDragStart]\n        )}\n        onDrop={useCallback(\n          (event: React.DragEvent<HTMLDivElement>) => {\n            if (\n              hasTarget(editor, event.target) &&\n              !readOnly &&\n              !isEventHandled(event, attributes.onDrop)\n            ) {\n              // COMPAT: Certain browsers don't fire `beforeinput` events at all, and\n              // Chromium browsers don't properly fire them for files being\n              // dropped into a `contenteditable`. (2019/11/26)\n              // https://bugs.chromium.org/p/chromium/issues/detail?id=1028668\n              if (\n                !HAS_BEFORE_INPUT_SUPPORT ||\n                (!IS_SAFARI && event.dataTransfer.files.length > 0)\n              ) {\n                event.preventDefault()\n                const range = ReactEditor.findEventRange(editor, event)\n                const data = event.dataTransfer\n                Transforms.select(editor, range)\n                ReactEditor.insertData(editor, data)\n              }\n            }\n          },\n          [readOnly, attributes.onDrop]\n        )}\n        onFocus={useCallback(\n          (event: React.FocusEvent<HTMLDivElement>) => {\n            if (\n              !readOnly &&\n              !state.isUpdatingSelection &&\n              hasEditableTarget(editor, event.target) &&\n              !isEventHandled(event, attributes.onFocus)\n            ) {\n              const el = ReactEditor.toDOMNode(editor, editor)\n              state.latestElement = window.document.activeElement\n\n              // COMPAT: If the editor has nested editable elements, the focus\n              // can go to them. In Firefox, this must be prevented because it\n              // results in issues with keyboard navigation. (2017/03/30)\n              if (IS_FIREFOX && event.target !== el) {\n                el.focus()\n                return\n              }\n\n              IS_FOCUSED.set(editor, true)\n            }\n          },\n          [readOnly, attributes.onFocus]\n        )}\n        onKeyDown={useCallback(\n          (event: React.KeyboardEvent<HTMLDivElement>) => {\n            if (\n              !readOnly &&\n              hasEditableTarget(editor, event.target) &&\n              !isEventHandled(event, attributes.onKeyDown)\n            ) {\n              const { nativeEvent } = event\n              const { selection } = editor\n\n              // COMPAT: Since we prevent the default behavior on\n              // `beforeinput` events, the browser doesn't think there's ever\n              // any history stack to undo or redo, so we have to manage these\n              // hotkeys ourselves. (2019/11/06)\n              if (Hotkeys.isRedo(nativeEvent)) {\n                event.preventDefault()\n\n                if (typeof editor.redo === 'function') {\n                  editor.redo()\n                }\n\n                return\n              }\n\n              if (Hotkeys.isUndo(nativeEvent)) {\n                event.preventDefault()\n\n                if (typeof editor.undo === 'function') {\n                  editor.undo()\n                }\n\n                return\n              }\n\n              // COMPAT: Certain browsers don't handle the selection updates\n              // properly. In Chrome, the selection isn't properly extended.\n              // And in Firefox, the selection isn't properly collapsed.\n              // (2017/10/17)\n              if (Hotkeys.isMoveLineBackward(nativeEvent)) {\n                event.preventDefault()\n                Transforms.move(editor, { unit: 'line', reverse: true })\n                return\n              }\n\n              if (Hotkeys.isMoveLineForward(nativeEvent)) {\n                event.preventDefault()\n                Transforms.move(editor, { unit: 'line' })\n                return\n              }\n\n              if (Hotkeys.isExtendLineBackward(nativeEvent)) {\n                event.preventDefault()\n                Transforms.move(editor, {\n                  unit: 'line',\n                  edge: 'focus',\n                  reverse: true,\n                })\n                return\n              }\n\n              if (Hotkeys.isExtendLineForward(nativeEvent)) {\n                event.preventDefault()\n                Transforms.move(editor, { unit: 'line', edge: 'focus' })\n                return\n              }\n\n              // COMPAT: If a void node is selected, or a zero-width text node\n              // adjacent to an inline is selected, we need to handle these\n              // hotkeys manually because browsers won't be able to skip over\n              // the void node with the zero-width space not being an empty\n              // string.\n              if (Hotkeys.isMoveBackward(nativeEvent)) {\n                event.preventDefault()\n\n                if (selection && Range.isCollapsed(selection)) {\n                  Transforms.move(editor, { reverse: true })\n                } else {\n                  Transforms.collapse(editor, { edge: 'start' })\n                }\n\n                return\n              }\n\n              if (Hotkeys.isMoveForward(nativeEvent)) {\n                event.preventDefault()\n\n                if (selection && Range.isCollapsed(selection)) {\n                  Transforms.move(editor)\n                } else {\n                  Transforms.collapse(editor, { edge: 'end' })\n                }\n\n                return\n              }\n\n              if (Hotkeys.isMoveWordBackward(nativeEvent)) {\n                event.preventDefault()\n                Transforms.move(editor, { unit: 'word', reverse: true })\n                return\n              }\n\n              if (Hotkeys.isMoveWordForward(nativeEvent)) {\n                event.preventDefault()\n                Transforms.move(editor, { unit: 'word' })\n                return\n              }\n\n              // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n              // fall back to guessing at the input intention for hotkeys.\n              // COMPAT: In iOS, some of these hotkeys are handled in the\n              if (!HAS_BEFORE_INPUT_SUPPORT) {\n                // We don't have a core behavior for these, but they change the\n                // DOM if we don't prevent them, so we have to.\n                if (\n                  Hotkeys.isBold(nativeEvent) ||\n                  Hotkeys.isItalic(nativeEvent) ||\n                  Hotkeys.isTransposeCharacter(nativeEvent)\n                ) {\n                  event.preventDefault()\n                  return\n                }\n\n                if (Hotkeys.isSplitBlock(nativeEvent)) {\n                  event.preventDefault()\n                  Editor.insertBreak(editor)\n                  return\n                }\n\n                if (Hotkeys.isDeleteBackward(nativeEvent)) {\n                  event.preventDefault()\n\n                  if (selection && Range.isExpanded(selection)) {\n                    Editor.deleteFragment(editor)\n                  } else {\n                    Editor.deleteBackward(editor)\n                  }\n\n                  return\n                }\n\n                if (Hotkeys.isDeleteForward(nativeEvent)) {\n                  event.preventDefault()\n\n                  if (selection && Range.isExpanded(selection)) {\n                    Editor.deleteFragment(editor)\n                  } else {\n                    Editor.deleteForward(editor)\n                  }\n\n                  return\n                }\n\n                if (Hotkeys.isDeleteLineBackward(nativeEvent)) {\n                  event.preventDefault()\n\n                  if (selection && Range.isExpanded(selection)) {\n                    Editor.deleteFragment(editor)\n                  } else {\n                    Editor.deleteBackward(editor, { unit: 'line' })\n                  }\n\n                  return\n                }\n\n                if (Hotkeys.isDeleteLineForward(nativeEvent)) {\n                  event.preventDefault()\n\n                  if (selection && Range.isExpanded(selection)) {\n                    Editor.deleteFragment(editor)\n                  } else {\n                    Editor.deleteForward(editor, { unit: 'line' })\n                  }\n\n                  return\n                }\n\n                if (Hotkeys.isDeleteWordBackward(nativeEvent)) {\n                  event.preventDefault()\n\n                  if (selection && Range.isExpanded(selection)) {\n                    Editor.deleteFragment(editor)\n                  } else {\n                    Editor.deleteBackward(editor, { unit: 'word' })\n                  }\n\n                  return\n                }\n\n                if (Hotkeys.isDeleteWordForward(nativeEvent)) {\n                  event.preventDefault()\n\n                  if (selection && Range.isExpanded(selection)) {\n                    Editor.deleteFragment(editor)\n                  } else {\n                    Editor.deleteForward(editor, { unit: 'word' })\n                  }\n\n                  return\n                }\n              }\n            }\n          },\n          [readOnly, attributes.onKeyDown]\n        )}\n        onPaste={useCallback(\n          (event: React.ClipboardEvent<HTMLDivElement>) => {\n            // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n            // fall back to React's `onPaste` here instead.\n            // COMPAT: Firefox, Chrome and Safari are not emitting `beforeinput` events\n            // when \"paste without formatting\" option is used.\n            // This unfortunately needs to be handled with paste events instead.\n            if (\n              hasEditableTarget(editor, event.target) &&\n              !isEventHandled(event, attributes.onPaste) &&\n              (!HAS_BEFORE_INPUT_SUPPORT ||\n                isPlainTextOnlyPaste(event.nativeEvent)) &&\n              !readOnly\n            ) {\n              event.preventDefault()\n              ReactEditor.insertData(editor, event.clipboardData)\n            }\n          },\n          [readOnly, attributes.onPaste]\n        )}\n      >\n        <Children\n          decorate={decorate}\n          decorations={decorations}\n          node={editor}\n          renderElement={renderElement}\n          renderLeaf={renderLeaf}\n          selection={editor.selection}\n        />\n      </Component>\n    </ReadOnlyContext.Provider>\n  )\n}\n\n/**\n * A default memoized decorate function.\n */\n\nconst defaultDecorate = () => []\n\n/**\n * Check if two DOM range objects are equal.\n */\n\nconst isRangeEqual = (a: DOMRange, b: DOMRange) => {\n  return (\n    (a.startContainer === b.startContainer &&\n      a.startOffset === b.startOffset &&\n      a.endContainer === b.endContainer &&\n      a.endOffset === b.endOffset) ||\n    (a.startContainer === b.endContainer &&\n      a.startOffset === b.endOffset &&\n      a.endContainer === b.startContainer &&\n      a.endOffset === b.startOffset)\n  )\n}\n\n/**\n * Check if the target is in the editor.\n */\n\nconst hasTarget = (\n  editor: ReactEditor,\n  target: EventTarget | null\n): target is DOMNode => {\n  return isDOMNode(target) && ReactEditor.hasDOMNode(editor, target)\n}\n\n/**\n * Check if the target is editable and in the editor.\n */\n\nconst hasEditableTarget = (\n  editor: ReactEditor,\n  target: EventTarget | null\n): target is DOMNode => {\n  return (\n    isDOMNode(target) &&\n    ReactEditor.hasDOMNode(editor, target, { editable: true })\n  )\n}\n\n/**\n * Check if the target is inside void and in the editor.\n */\n\nconst isTargetInsideVoid = (\n  editor: ReactEditor,\n  target: EventTarget | null\n): boolean => {\n  const slateNode =\n    hasTarget(editor, target) && ReactEditor.toSlateNode(editor, target)\n  return Editor.isVoid(editor, slateNode)\n}\n\n/**\n * Check if an event is overrided by a handler.\n */\n\nconst isEventHandled = <\n  EventType extends React.SyntheticEvent<unknown, unknown>\n>(\n  event: EventType,\n  handler?: (event: EventType) => void\n) => {\n  if (!handler) {\n    return false\n  }\n\n  handler(event)\n  return event.isDefaultPrevented() || event.isPropagationStopped()\n}\n\n/**\n * Check if a DOM event is overrided by a handler.\n */\n\nconst isDOMEventHandled = (event: Event, handler?: (event: Event) => void) => {\n  if (!handler) {\n    return false\n  }\n\n  handler(event)\n  return event.defaultPrevented\n}\n"]},"metadata":{},"sourceType":"module"}